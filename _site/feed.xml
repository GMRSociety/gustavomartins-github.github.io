<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>GMR Blog</title>
    <description>这里是 @Hux黄玄 的个人博客，与你一起发现更大的世界 | 要做一个有 swag 的程序员</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Tue, 14 Nov 2023 14:42:28 -0300</pubDate>
    <lastBuildDate>Tue, 14 Nov 2023 14:42:28 -0300</lastBuildDate>
    <generator>Jekyll v4.3.2</generator>
    
      <item>
        <title>Um pouco mais sobre CSPs</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;“Algumas pessoas chamam isso de inteligência artificial, quando a realidade é que essa tecnologia irá nos melhorar. Então, em vez de inteligência artificial, acredito que aumentaremos nossa inteligência” — &lt;strong&gt;Ginni Rometty&lt;/strong&gt;”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;impressões-iniciais&quot;&gt;Impressões Iniciais&lt;/h2&gt;

&lt;p algin=&quot;justify&quot;&gt;
    Os Algoritmos de Problemas de Satisfação de Condições (CSPs) desempenham um papel crucial na resolução de desafios computacionais que envolvem a alocação eficiente de valores a variáveis sob condições específicas. Estes algoritmos exploram estratégias avançadas para encontrar soluções coerentes em cenários complexos, como otimização de recursos, design de circuitos e agendamento de tarefas. O uso de algoritmos de satisfação de condições é particularmente relevante em situações onde é necessário modelar e resolver problemas que demandam a consideração de diversas restrições simultâneas. A estrutura de problemas de CSPs, por sua vez, envolve a definição clara de variáveis, domínios, e condições, estabelecendo a base para a aplicação desses algoritmos. Compreender esses conceitos é fundamental para abordar eficientemente questões práticas e complexas em diversas áreas, contribuindo para avanços significativos na solução de problemas computacionais.
&lt;/p&gt;

&lt;h2 id=&quot;algoritmos&quot;&gt;Algoritmos&lt;/h2&gt;

&lt;p align=&quot;justify&quot;&gt;
    Existem diversos algoritmos de CSPs. Diante disso, o algoritmo AC-3 (Arc-Consistency 3) representa uma abordagem fundamental na resolução de Problemas de Satisfação de Condições (CSPs), especialmente quando se trata de garantir consistência entre variáveis. Além disso, o AC-3 desempenha um papel significativo na simplificação do espaço de busca, contribuindo para a eficácia na resolução de CSPs e representando uma ferramenta valiosa na caixa de ferramentas da inteligência artificial e da computação aplicada.
&lt;/p&gt;

&lt;p align=&quot;justify&quot;&gt;
    Desenvolvido para lidar com restrições binárias, o AC-3 foca na redução dos domínios das variáveis, removendo valores que não são mais consistentes com as restrições estabelecidas. Essa técnica de propagação de consistência de arco tem aplicações amplas em áreas como otimização, planejamento e design, onde a eficiência na busca por soluções coerentes é crucial. Confira a seguir uma implementação desse algoritmo escrita na linguagem &lt;a href=&quot;https://www.python.org/downloads/&quot;&gt;python&lt;/a&gt;.
&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;
    REF: https://medium.com/swlh/how-to-solve-constraint-satisfaction-problems-csps-with-ac-3-algorithm-in-python-f7a9be538cfe

    Implementação do algoritmo AC-3 (Arc Consistency 3) genérico para resolver CSPs (Constraint Satisfaction Problems).

    Esse algoritmo consiste nas seguintes etapas:

    1. Transforme todas as condições em condições de arco (binárias)
    2. Inicialize a fila com todos os arcos
    3. Repita até a fila estar vazia:
        3.1 Pegue o primeiro arco (x,y) da fila
        3.2 Faça x arco consistente com y (Remova valores no domínio de x para os quais não existe valor possível no domínio de y)
        3.3 Se o domínio de x mudou, acrescente todos os arcos da forma (k,x) a fila (k é um nó adjacente a x)
&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&quot;&quot;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# criando domínios
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dominios&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
    &lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
    &lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# criando restrições
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;restricoes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# criando arcos
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arcos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Criando a função rever: responsável por remover valores no domínio de x para os quais não existe valor possível no domínio de y
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;rever&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# Variável que indica se o domínio de x foi alterado
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;revisado&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# Para cada valor no domínio de x
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vx&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dominios&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;# Se não existe um valor vy no domínio de y para o qual a restrição (x,y) é satisfeita
&lt;/span&gt;        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;any&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;restricoes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vy&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dominios&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]):&lt;/span&gt;

            &lt;span class=&quot;c1&quot;&gt;# Remova vx do domínio de x
&lt;/span&gt;            &lt;span class=&quot;n&quot;&gt;dominios&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

            &lt;span class=&quot;c1&quot;&gt;# Marque que o domínio de x foi alterado
&lt;/span&gt;            &lt;span class=&quot;n&quot;&gt;revisado&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# Retorne True se o domínio de x foi alterado
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;revisado&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Criando a função AC-3: responsável por atualizar os domínios de forma que cada variável seja consistente em arco.
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ac3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# Adicionando todos os arcos à fila
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;fila&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arcos&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# Enquanto a fila não estiver vazia
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fila&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;# Pegando o primeiro arco da fila
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fila&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;pop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;# Faça o arco x consistente com y (Remova valores no domínio de x para os quais não existe valor possível no domínio de y)
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;revisado&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;rever&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;# Se o domínio de x mudou
&lt;/span&gt;        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;revisado&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;# Acrescente todos os arcos da forma (k,x) a fila
&lt;/span&gt;            &lt;span class=&quot;n&quot;&gt;vizinhos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arco&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arco&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arcos&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arco&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;fila&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;extend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vizinhos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# extend() adiciona os elementos de uma lista (vizinhos) ao final da lista (fila)
&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# Função de teste
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;teste&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Antes da execução do algoritmo AC-3:&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Domínios:&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dominios&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Restrições:&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;restricoes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Arcos:&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arcos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;nf&quot;&gt;ac3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Depois da execução do algoritmo AC-3:&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Domínios:&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dominios&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Restrições:&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;restricoes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Arcos:&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arcos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Observe que os domínios foram atualizados de forma que cada variável seja consistente em arco.&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Inicializando o programa
&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;teste&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p align=&quot;justify&quot;&gt;
    Além do AC-3, a &lt;strong&gt;Pesquisa Backtracking&lt;/strong&gt; é um algoritmo comumente empregado na resolução de Problemas de Satisfação de Condições (CSPs). Este método utiliza uma abordagem de busca em profundidade (DFS), explorando sucessivamente as opções de atribuição de valores às variáveis e retrocedendo quando uma solução parcial se mostra inconsistente com as condições do problema.
&lt;/p&gt;

&lt;p align=&quot;justify&quot;&gt;
O backtracking é eficaz na otimização do processo de busca, evitando ramos que levariam a soluções inválidas, o que é particularmente útil em cenários onde o espaço de busca é extenso. Essa estratégia de pesquisa é crucial em CSPs, permitindo encontrar soluções coerentes de maneira eficiente, economizando recursos computacionais ao evitar iterações desnecessárias. Confira um exemplo de implementação do algoritmo DFS no artigo &lt;a href=&quot;https://gustavomartins-github.github.io/2023/10/27/P2-2023/&quot;&gt;Algoritmos de Busca em AI&lt;/a&gt;.
&lt;/p&gt;

&lt;p align=&quot;justify&quot;&gt;
    Não satisfeito, essa pesquisa pode ser melhorada usando heurísticas independentes de domínio que tiram vantagem da representação fatorada dos CSPs, sendo a ordenação de variáveis uma estratégia para determinar a sequência em que as variáveis são consideradas para atribuição de valores, buscando otimizar o processo de busca e tornar a resolução mais eficiente. Sendo assim, os principais tipos de ordenação de variáveis, no contexto da Pesquisa Backtracking em CSPs são:
&lt;/p&gt;

&lt;ul align=&quot;justify&quot;&gt;
    &lt;li&gt;&lt;strong&gt;Ordenação Estática:&lt;/strong&gt; consiste em uma ordem fixa pré-definida para atribuir valores às variáveis. A ordem é determinada antes do início da resolução do problema e permanece constante ao longo do processo.&lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;Ordenação aleatória:&lt;/strong&gt; atribui valores às variáveis de forma aleatória. A ordem varia a cada execução do algoritmo. Embora seja simples, essa abordagem pode não ser tão eficiente quanto estratégias mais direcionadas.&lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;Minimum-Remaining-Values (MRV):&lt;/strong&gt; prioriza as variáveis que têm o menor número de valores restantes em seu domínio. Isso visa explorar primeiro as variáveis mais restritas, na esperança de reduzir rapidamente o espaço de busca.&lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;Heurística de Grau:&lt;/strong&gt; ordena as variáveis com base na quantidade de restrições associadas a cada uma. Variáveis com maior grau (maior número de restrições) são consideradas primeiro, visando abordar áreas mais complexas do espaço de busca.&lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;Ordenação de valor:&lt;/strong&gt; Foca na ordem em que os valores são atribuídos a uma variável específica. Essa estratégia busca otimizar a eficiência da busca considerando os valores mais promissores primeiro, muitas vezes começando com os menos restritivos (least-constraining-value), isto é, o valor que exclui o menor número de escolhas para as variáveis ​​vizinhas no grafo. &lt;/li&gt;
&lt;/ul&gt;

&lt;p align=&quot;justify&quot;&gt;
    Outra estratégia interessante é a &quot;intercalação entre pesquisa e inferência para CSPs&quot;, a qual combina a Pesquisa Backtracking com o &quot;Forward checking&quot;, uma técnica de inferência que, após cada atribuição de valor, verifica antecipadamente se essa atribuição não viola as restrições, reduzindo os domínios das variáveis afetadas. Sendo assim, a pesquisa avança explorando as possíveis soluções, enquanto a inferência do &quot;Forward checking&quot; reduz dinamicamente o espaço de busca, eliminando opções inválidas. Essa integração busca otimizar a eficiência, evitando retrocessos desnecessários e focando nas áreas mais promissoras do espaço de busca durante a resolução de CSPs.
&lt;/p&gt;

&lt;p align=&quot;justify&quot;&gt;
    Não satisfeito, outra técnica, conhecida como Maintaining Arc Consistency (Manter Consistência de Arcos - MAC), se faz importânte no contexto atual. Nessa técnica, após uma variável receber um valor, um procedimento denominado &lt;u&gt;0INFERENCE&lt;/u&gt; é acionado, utilizando o algoritmo &lt;u&gt;AC-3&lt;/u&gt;. A ênfase é dada à abordagem específica de começar com os arcos conectados a variáveis não atribuídas vizinhas à variável recém-atribuída. Essa estratégia visa manter a consistência entre arcos mesmo após atribuições, utilizando inferência para ajustar dinamicamente os domínios das variáveis não atribuídas e otimizar a busca por soluções válidas e eficientes em CSPs.
&lt;/p&gt;

&lt;p align=&quot;justify&quot;&gt;
    Por fim, em CSPs, a busca local (algoritmo também tratado no artigo &lt;a href=&quot;https://gustavomartins-github.github.io/2023/10/27/P2-2023/&quot;&gt;Algoritmos de Busca em AI&lt;/a&gt;) é frequentemente aplicada como uma heurística para encontrar soluções mais eficientes. Ela explora um espaço de soluções próximas à solução atual, fazendo pequenas modificações para avaliar se há uma melhoria na satisfação das condições do problema. Essa estratégia pode ser particularmente útil quando se trata de refinamento de soluções, ajustando atribuições de variáveis para otimizar a consistência global, sendo extremamente valiosa para resolver CSPs de maneira mais rápida e eficiente, especialmente em cenários onde a busca completa pode ser computacionalmente custosa.
&lt;/p&gt;

&lt;h2 id=&quot;estrutura-de-problemas&quot;&gt;Estrutura de Problemas&lt;/h2&gt;

&lt;p align=&quot;justify&quot;&gt;
    Uma estratégia muito utlizada em diverças áreas da ciência é lidar com problemas complexos por meio da divisão em subproblemas. Essa abordagem está alinhada com a Estrutura de Problemas em CSPs, onde as variáveis e restrições podem ser modularizadas, permitindo a resolução de subproblemas de maneira eficiente. É nesse contexto que a determinação da independência através da identificação de componentes conectados no grafo é relevante para a Estrutura de Problemas em CSPs. Isso se deve ao fato de as variáveis independentes poderem ser tratadas separadamente, simplificando a resolução. A estrutura do problema é expressa no grafo de restrições, onde a análise de componentes conectados ajuda a entender as relações entre variáveis e a estratégia de resolução.
&lt;/p&gt;

&lt;p align=&quot;justify&quot;&gt;
    Por outro lado, subproblemas completamente independentes são raros, tornando outras estruturas também muito úteis para facilitar soluções. Um bom exemplo é a utilização de uma estrutura em árvore para resolver CSPs. Tal estrutura envolve a construção de uma árvore de busca, onde cada nó representa uma atribuição de valor a uma variável. Não satisfeito, existe uma técnica denominada Direcional Arc Consistency (DAC), a qual guia a expansão da árvore, focando na consistência de arcos em uma direção específica. Isso significa que, ao explorar a árvore, a DAC prioriza verificar e ajustar a consistência dos arcos relevantes, otimizando a eficiência na busca por soluções coerentes. Essa abordagem direcionada permite reduzir o espaço de busca de forma mais eficaz, contribuindo para a resolução eficiente de CSPs. Portanto, para resolver CSPs em árvore, é necessário realizar os seguintes passos:
&lt;/p&gt;

&lt;ul align=&quot;justify&quot;&gt;

    &lt;li&gt;&lt;strong&gt;1 -&lt;/strong&gt; escolhe-se uma variável como a raiz &lt;/li&gt;
    &lt;br /&gt;
    &lt;li&gt;&lt;strong&gt;2 -&lt;/strong&gt; realiza-se uma classificação topológica, isto é, uma ordenação da árvore de forma que cada variável aparece após seu genitor na árvore
    &lt;br /&gt;
    &lt;br /&gt;
    &lt;strong&gt;Obs.:&lt;/strong&gt; Quando temos um grafo arco-consistente em um Problema de Satisfação de Condições (CSP), podemos escolher valores para as variáveis de maneira direta. Isso ocorre porque, dado que cada aresta entre um pai e seu filho é arco-consistente, a escolha de um valor para o pai garante a existência de um valor válido para o filho. Isso simplifica a busca por soluções, pois a consistência entre variáveis conectadas já foi estabelecida no grafo.&lt;/li&gt;
&lt;/ul&gt;

&lt;p align=&quot;justify&quot;&gt;
    Em suma, duas técnicas de suma importância se fazem presente na estruturação de DSPs: &lt;u&gt;Condicionamento de Corte&lt;/u&gt; e &lt;u&gt;Decomposição em Árvore&lt;/u&gt;. A primeira refere-se à técnica de reduzir o espaço de busca eliminando opções inválidas com base em decisões já tomadas. Ao condicionar (restringir) as possibilidades para variáveis específicas, o espaço de busca é cortado, simplificando a resolução do CSP. Já a segunda, envolve a representação do CSP por meio de uma árvore, onde cada nó representa uma variável a ser atribuída. A decomposição em árvore facilita a estruturação do problema, permitindo uma abordagem mais eficiente para a resolução, especialmente quando combinada com técnicas como o condicionamento de corte. Cada nível na árvore representa uma variável a ser atribuída, simplificando a busca por soluções coerentes
&lt;/p&gt;

&lt;h2 id=&quot;outros-algoritmos-de-satisfação-de-condições&quot;&gt;Outros Algoritmos de Satisfação de Condições&lt;/h2&gt;

&lt;h2 id=&quot;expansão-do-uso-de-algoritmos-de-satisfação-de-condições&quot;&gt;Expansão do uso de algoritmos de satisfação de condições&lt;/h2&gt;

&lt;h2 id=&quot;exemplos-práticos&quot;&gt;Exemplos Práticos&lt;/h2&gt;

&lt;h2 id=&quot;conclusão&quot;&gt;Conclusão&lt;/h2&gt;

&lt;h2 id=&quot;referências&quot;&gt;Referências&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;ref 1&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;ref 2&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        <pubDate>Sat, 11 Nov 2023 18:00:00 -0300</pubDate>
        <link>http://localhost:4000/2023/11/11/P3-2023/</link>
        <guid isPermaLink="true">http://localhost:4000/2023/11/11/P3-2023/</guid>
        
        <category>Portifólio 3</category>
        
        
      </item>
    
      <item>
        <title>CSPs</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;“Para n⁠ão ser substituído por um robô, não seja um robô”. — &lt;strong&gt;Martha Gabriel&lt;/strong&gt;”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;impressões-iniciais&quot;&gt;Impressões Iniciais&lt;/h2&gt;

&lt;p align=&quot;justify&quot;&gt;
    Os Problemas de Satisfação de Condições (CSPs) constituem uma classe crucial de desafios computacionais que permeiam diversas disciplinas, desde inteligência artificial até otimização de recursos. Em sua essência, CSPs envolvem a alocação de valores a variáveis sob um conjunto específico de condições, refletindo cenários práticos onde decisões interdependentes precisam ser tomadas. Estes problemas apresentam aplicação em áreas como planejamento, design de circuitos, escalonamento de tarefas, entre outros. A resolução eficaz de CSPs exige a aplicação de estratégias avançadas, incluindo consistência local e global, além de métodos de busca heurística. Compreender os fundamentos dos CSPs é essencial para abordar questões complexas na era da computação, proporcionando insights valiosos para a resolução de problemas do mundo real.
&lt;/p&gt;

&lt;h2 id=&quot;representação-atômica-vs-fatorada&quot;&gt;Representação Atômica Vs Fatorada&lt;/h2&gt;

&lt;p align=&quot;justify&quot;&gt;
    De acordo com o artigo &lt;a href=&quot;https://gustavomartins-github.github.io/2023/08/10/P1-2023/&quot;&gt;Agentes e ambientes&lt;/a&gt;, um estado consiste em uma descrição do ambiente em um determinado momento e pode ser representado de três formas distintas: representação atômica, fatorada e estruturada. Contudo, os estados foram trabalhados como &quot;caixas pretas&quot;, isto é, ignorando o seu funcionamento interno.
&lt;/p&gt;

&lt;p align=&quot;justify&quot;&gt;
    Diante disso, a partir de agora serão tratados problemas cujos estados possuem uma série de variáveis, sendo sua solução dada quando cada variável tem um valor que satisfaz todas as condições dessas variáveis. Tais problemas são conhecidos como &lt;strong&gt;Problemas de Satisfação de Condições&lt;/strong&gt; (CSP, do inglês &quot;Constraint Satisfaction Problem&quot;), sendo a representação atômica e fatorada muito importantes para a modelagem eficiente de resoluções de CSP. Confira a seguir uma explicação mais detalhada sobre cada representação.
&lt;/p&gt;

&lt;ul align=&quot;justify&quot;&gt;
    &lt;li&gt;&lt;strong&gt;Representação Atômica:&lt;/strong&gt; cada restrição é tratada como uma entidade única e não pode ser decomposta em partes menores. Essa abordagem é simples e direta, mas pode levar a uma representação mais extensa e complexa, especialmente em problemas com muitas variáveis e restrições.&lt;/li&gt;
    &lt;br /&gt;
    &lt;li&gt;&lt;strong&gt;Representação Fatorada:&lt;/strong&gt; as restrições são decompostas em partes menores, chamadas fatores, que podem ser combinados para formar a restrição completa, permitindo uma representação mais modular e eficiente, especialmente quando várias restrições compartilham variáveis em comum.&lt;/li&gt;
&lt;/ul&gt;

&lt;p align=&quot;justify&quot;&gt;
    Por fim, ambas as representações são utilizadas na modelagem de CSPs para expressar as restrições entre variáveis, sendo a escolha entre representação atômica e fatorada dependente da natureza específica do problema e das características das restrições, sendo que, em alguns casos, uma combinação de ambas as representações pode ser usada para aproveitar as vantagens de cada abordagem.
&lt;/p&gt;

&lt;h2 id=&quot;definindo-problemas-de-satisfação-de-condições&quot;&gt;Definindo Problemas de Satisfação de Condições&lt;/h2&gt;

&lt;p align=&quot;justify&quot;&gt;
    Os algoritmos de busca para Problemas de Satisfação de Condições (CSP) aproveitam a organização estruturada dos estados e aplicam heurísticas específicas do domínio para viabilizar a solução de problemas computacionais complexos. A principal ideia subjacente é a eliminação eficiente de extensas porções do espaço de busca, identificando combinações de variáveis e valores que violam as condições estabelecidas. Além disso, os CSPs oferecem uma vantagem adicional, já que as ações e o modelo de transição podem ser deduzidos diretamente da descrição do problema, simplificando a representação e resolução desses desafios.
&lt;/p&gt;

&lt;p align=&quot;justify&quot;&gt;
    Diante disso, um problema de satisfação de condições pode ser dividido em três partes:
&lt;/p&gt;

&lt;ul align=&quot;justify&quot;&gt;
    &lt;li&gt;&lt;strong&gt;Conjunto de Variáveis:&lt;/strong&gt; refere-se às entidades sobre as quais as decisões devem ser tomadas&lt;/li&gt;
    &lt;br /&gt;
    &lt;li&gt;&lt;strong&gt;Conjunto de Domínios:&lt;/strong&gt; cada variável possui um conjunto de valores possíveis (domínio). Sendo assim, o conjunto de domínios armazena todos os domínios de todas as variáveis.&lt;/li&gt;
    &lt;br /&gt;    
    &lt;li&gt;&lt;strong&gt;Conjunto de Condições:&lt;/strong&gt; também conhecido como conjunto de restrições, estabelece as relações e limitações entre as variáveis, indicando quais combinações de valores são aceitáveis ou proibidas&lt;/li&gt;
&lt;/ul&gt;

&lt;p align=&quot;justify&quot;&gt;
    Como mencionado, as CSPs envolvem a alocação de valores a variáveis de acordo com o domínio. Sendo assim, essa atribuição de valores pode possuir as seguintes características:
&lt;/p&gt;

&lt;ul align=&quot;justify&quot;&gt;
    &lt;li&gt;&lt;strong&gt;Atribuição Consistente/Legal:&lt;/strong&gt; atribuição que não viola nenhuma condição&lt;/li&gt;&lt;br /&gt;

    &lt;li&gt;&lt;strong&gt;Atribuição Completa:&lt;/strong&gt; ocorre quando todas as variáveis recebem um valor&lt;/li&gt;&lt;br /&gt;

    &lt;li&gt;&lt;strong&gt;Atribuição Parcial:&lt;/strong&gt; é o oposto da atribuição completa, isto é, há a existência de variáveis sem atribuição de valor&lt;/li&gt;
&lt;/ul&gt;

&lt;p align=&quot;justify&quot;&gt;
    Além disso, é importante mencionar que, em Problemas de Satisfação de Condições, uma solução é definida como uma atribuição completa e consistente de valores para todas as variáveis envolvidas no problema. Por outro lado, uma solução pode ser considerada &lt;strong&gt;parcial&lt;/strong&gt;, isto é, quando uma atribuição parcial, que é consistente até o momento, acaba deixando algumas variáveis sem atribuições.
&lt;/p&gt;

&lt;p align=&quot;justify&quot;&gt;
    Por fim, resolver CSPs é um desafio complexo, uma vez que o problema é, em geral, classificado como NP-completo. Isso implica que não existe um algoritmo eficiente conhecido para encontrar soluções ótimas em tempo polinomial, exigindo abordagens heurísticas e estratégias inteligentes para lidar com a complexidade inerente a esses problemas.
&lt;/p&gt;

&lt;h2 id=&quot;tipos-de-condições-e-propagação&quot;&gt;Tipos de Condições e Propagação&lt;/h2&gt;

&lt;p align=&quot;justify&quot;&gt;
    Em um CSPs, uma condição refere-se a uma restrição ou requisito que deve ser atendido pelas atribuições de valores às variáveis do problema. Essas condições expressam as relações e limitações entre as variáveis e determinam quais combinações de valores são aceitáveis ou proibidas. Tais condições podem ser divididas em diferentes tipos, tais como:
&lt;/p&gt;

&lt;ul align=&quot;justify&quot;&gt;
    &lt;li&gt;&lt;strong&gt;Condição Unitária:&lt;/strong&gt; refere-se a uma restrição que envolve apenas uma variável. É uma condição que limita as opções de valores que uma variável específica pode assumir.&lt;/li&gt;&lt;br /&gt;
    &lt;li&gt;&lt;strong&gt;Condição Binária:&lt;/strong&gt; envolve duas variáveis e estabelece uma restrição entre elas. Essas restrições ligam pares de variáveis, influenciando as possíveis combinações de valores que essas variáveis podem ter.&lt;/li&gt;&lt;br /&gt;
    &lt;li&gt;&lt;strong&gt;Condição Ternária&lt;/strong&gt; refere-se a uma restrição que envolve três variáveis. Assim como as condições binárias, as condições ternárias estabelecem relações específicas entre três variáveis no contexto de um CSP. &lt;/li&gt;&lt;br /&gt;
    &lt;li&gt;&lt;strong&gt;Condição Global:&lt;/strong&gt; refere-se a uma restrição que pode envolver mais de três variáveis. Uma condição global afeta um número significativo de variáveis e, frequentemente, está relacionada a padrões ou estruturas mais complexas dentro do problema.&lt;/li&gt;&lt;br /&gt;
    &lt;li&gt;&lt;strong&gt;Condição de Preferência:&lt;/strong&gt; diferencia-se das restrições tradicionais, pois não impõe obrigações estritas, mas expressa preferências entre as atribuições de valores às variáveis. Em vez de ditar o que é proibido ou obrigatório, a condição de preferência indica quais atribuições são mais desejáveis em relação a outras, permitindo encontrar uma &lt;u&gt;solução preferida&lt;/u&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p align=&quot;justify&quot;&gt;
    Outra informação relevante é entender que, em algoritmos de espaço de estados atômicos, o avanço se dá apenas pela expansão dos nós sucessores, e que um algoritmo CSP pode escolher um valor para uma variável, assim como &lt;u&gt;propagar a condição/restrição&lt;/u&gt;. Essa técnica, com o objetivo de garantir uma &lt;u&gt;consistência local&lt;/u&gt;, consiste em reduzir o número de valores possíveis para uma variável, que por sua vez pode reduzir o número de valores possíveis para outra e assim sucessivamente.
&lt;/p&gt;

&lt;h2 id=&quot;consistência&quot;&gt;Consistência&lt;/h2&gt;

&lt;p align=&quot;justify&quot;&gt;
    O concentio de &lt;u&gt;consistência&lt;/u&gt;, no contexto das CSPs, refere-se à propriedade de que todas as atribuições de valores às variáveis no problema estejam em conformidade com as restrições impostas. Em outras palavras, uma atribuição é consistente se ela não viola nenhuma das condições ou restrições do CSP. Sendo assim, existem diferentes níveis de consistência em CSPs, e a propagação de condição é frequentemente usada para manter ou alcançar consistência durante o processo de busca por soluções. Alguns dos níveis de consistência comuns são:
&lt;/p&gt;

&lt;ul align=&quot;justify&quot;&gt;

    &lt;li&gt;
        &lt;strong&gt;Consistência de Nós:&lt;/strong&gt; uma variável é nó-consistente se todas as atribuições de valores possíveis respeitam as restrições locais impostas por essa variável (domínio). Um grafo é nó-consistente se todas as suas variáveis (nós) são consistentes.
    &lt;/li&gt;
    &lt;br /&gt;
    &lt;li&gt;
        &lt;strong&gt;Consistência de Arco:&lt;/strong&gt; uma variável é  arco-consistente quando todos os valores em seu domínio satisfazem as condições binárias associadas a outras variáveis, isto é, cada valor possível na variável respeita as restrições em relação a cada par de variáveis conectadas. Um grafo é arco-consistente se todas as suas variáveis são arco-consistentes entre si
    &lt;/li&gt;
    &lt;br /&gt;
    &lt;li&gt;
        &lt;strong&gt;Consistência de Trajeto:&lt;/strong&gt; emprega condições implícitas que podem ser deduzidas ao analisar triplas de variáveis. Sendo assim, um conjunto de duas variáveis é considerado trajeto-consistente com uma terceira variável se, para toda atribuição consistente com todas as condições da terceira variável, existe uma atribuição que satisfaça simultaneamente as condições das duas variáveis iniciais. Isso implica que as relações entre as variáveis são consistentes ao longo de trajetórias específicas de três variáveis. Por fim, essa consistência contribui para uma busca mais eficiente por soluções coerentes em CSPs, considerando relações mais complexas entre as variáveis.
    &lt;/li&gt;
    &lt;br /&gt;
    &lt;li&gt;
        &lt;strong&gt;Consistência K:&lt;/strong&gt; em CSPs, a introdução de formas mais robustas de consistência é realizada por meio da noção de consistência-k. Uma CSP é considerada k-consistente quando, para qualquer conjunto de k-1 variáveis e para qualquer atribuição consistente dessas variáveis, existe uma atribuição consistente para a k-ésima variável. Esse conceito busca garantir que as atribuições sejam coerentes em conjuntos de variáveis de tamanho k. Além disso, uma CSP é fortemente k-consistente se ela for k-consistente, (k-1)-consistente, (k-2)-consistente, até 1-consistente. Essa progressão de consistência reforçada visa otimizar a eficiência na busca por soluções coerentes, eliminando possíveis inconsistências em diferentes conjuntos de variáveis de maneira sistemática.
    &lt;/li&gt;
    &lt;br /&gt;
    &lt;li&gt;
        &lt;strong&gt;Condições Globais:&lt;/strong&gt; as condições globais referem-se a restrições ou condições que envolvem múltiplas variáveis simultaneamente. Ao contrário das condições locais, que se aplicam individualmente a cada variável, as condições globais impactam o relacionamento entre várias variáveis do problema. Além disso, as condições globais impactam a consistência, pois afetam a validade das atribuições de valores nas variáveis em um contexto mais amplo, contribuindo para a coerência global do problema.
        &lt;br /&gt;
        &lt;strong&gt;Obs.:&lt;/strong&gt; para casos onde existe um número grande de valores, geralmente se usa  propagação de limites, isto é, uma técnica usada para reduzir os domínios das variáveis.
    &lt;/li&gt; 

&lt;/ul&gt;

&lt;h2 id=&quot;conclusão&quot;&gt;Conclusão&lt;/h2&gt;

&lt;p align=&quot;justify&quot;&gt;
    Abordamos deste artigo o conceito de representações atômicas e estruturadas em Problemas de Satisfação de Condições (CSPs), onde variáveis e condições podem ser expressas de forma individual ou inter-relacionada. Definimos CSPs como problemas que envolvem atribuições de valores a variáveis, sujeitas a condições específicas. Exploramos diferentes tipos de condições em CSPs, incluindo condições unitárias, binárias, ternárias, globais e de preferência, cada uma definindo restrições entre variáveis de maneiras específicas. Além disso, discutimos a importância da consistência, tanto local quanto global, na busca eficiente por soluções coerentes, destacando a propagação de condição e a propagação de limites como técnicas relevantes. Esses conceitos são fundamentais para a compreensão e resolução eficaz de problemas complexos em CSPs.
&lt;/p&gt;

&lt;h2 id=&quot;referências&quot;&gt;Referências&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;INTELIGÊNCIA Artificial - Problemas de Satisfação de Restrições. [S. l.: s. n.], 27/10/2020. Disponível em: https://www.youtube.com/watch?v=4OM16rG9dtA. Acesso em: 10 nov. 2023.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;PROBLEMA da satisfação de restrições. [S. l.], 23 ago. 2023. Disponível em: https://pt.wikipedia.org/wiki/Problema_da_satisfa%C3%A7%C3%A3o_de_restri%C3%A7%C3%B5es. Acesso em: 10 nov. 2023.&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        <pubDate>Fri, 10 Nov 2023 16:00:00 -0300</pubDate>
        <link>http://localhost:4000/2023/11/10/P3-2023/</link>
        <guid isPermaLink="true">http://localhost:4000/2023/11/10/P3-2023/</guid>
        
        <category>Portifólio 3</category>
        
        
      </item>
    
      <item>
        <title>Algoritmos de Busca em AI</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;“A introdução de abstrações adequadas é a nossa única ajuda mental para reduzir o apelo à enumeração, para organizar e dominar a complexidade.” — &lt;strong&gt;Edsger Dijkstra&lt;/strong&gt;”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;introdução&quot;&gt;Introdução&lt;/h2&gt;

&lt;p align=&quot;justify&quot;&gt;
Este artigo tem como finalidade realizar uma discussão sucinta sobre algoritmos de busca e suas aplicações (contextos de uso), assim como apresentar e discutir a implementação de alguns algoritmos de busca cega, informada e complexa.
&lt;/p&gt;

&lt;h2 id=&quot;discussão-sobre-algoritmos-de-busca-em-ia&quot;&gt;Discussão sobre algoritmos de busca em IA&lt;/h2&gt;

&lt;p align=&quot;justify&quot;&gt;
    Como visto no artigo &lt;a href=&quot;https://gustavomartins-github.github.io/2023/10/25/P2/&quot;&gt;Solução de Problemas em Inteligência Artificial&lt;/a&gt;, os algoritmos de busca desempenham um papel fundamental na área da inteligência artificial, pois são fundamentais para resolver problemas, tomar decisões e encontrar soluções. Segundo o professor &lt;a href=&quot;https://institucional.ufpel.edu.br/servidores/id/35487&quot;&gt;Ricardo Araujo&lt;/a&gt;, doutor em Ciência da Computação pela Universidade Federal do Rio Grande do Sul, em sua publicação &lt;a href=&quot;https://ricardomatsumura.medium.com/algoritmos-de-busca-para-intelig%C3%AAncia-artificial-7cb81172396c&quot;&gt;Algoritmos de Busca para Inteligência Artificial&lt;/a&gt;, pode-se dizer que, de maneira sucinta, um algoritmo de busca enumera possíveis soluções para um problema seguindo alguma sistemática que permita (e as vezes garanta) que uma solução desejada seja encontrada.
&lt;/p&gt;

&lt;p align=&quot;justify&quot;&gt;
    Outra informação extremamente relevante sobre este tema é o fenômeno conhecido como &lt;strong&gt;explosão do espaço de estados&lt;/strong&gt;. Esse fenômeno refere-se a um desafio que surge em problemas de busca ou otimização, especialmente no contexto da AI. Sendo assim, tal evento ocorre quando o número de estados ou combinações possíveis em um espaço de busca cresce exponencialmente à medida que se avança na exploração desse espaço. Um bom exemplo desse fenômeno é quando analisa-se jogos como Sudoku, Xadrez e &lt;a href=&quot;https://pt.wikipedia.org/wiki/Go&quot;&gt;Go&lt;/a&gt;.
&lt;/p&gt;

&lt;p align=&quot;justify&quot;&gt;
    Diante do fenômeno acima, fica evidênte que para alguns problemas a busca cega é ineficiênte. É ai que entra a Busca Heurística (Busca Informada ou Busca Exaustiva com Informação), sendo uma heurística uma abordagem que fornece uma solução prática e aproximada quando a solução ideal é difícil ou impossível de se encontrar em tempo hábil. Segundo Ricardo, no contexto de buscas, uma heurística consiste em uma função que retorna, para um dado estado, o custo aproximado de chegar deste estado até uma solução.
&lt;/p&gt;

&lt;p align=&quot;justify&quot;&gt;
    Por outro lado, alguns problemas possuem complexidade tal que nem mesmo uma busca informada com heurísticas adequadas é capaz de resolver. É o caso de espaço de buscas complexos, como o problema do &lt;a href=&quot;https://pt.wikipedia.org/wiki/Problema_do_caixeiro-viajante&quot;&gt;Caixeiro Viajante&lt;/a&gt; que envolve encontrar o caminho mais curto que visita todas as cidades exatamente uma vez e retorna à cidade de origem. Sendo assim, em um cenário do com um grande número de cidades, o espaço de busca cresce exponencialmente à medida que você adiciona mais cidades.
&lt;/p&gt;

&lt;h2 id=&quot;outras-aplicações-de-algoritmos-de-busca&quot;&gt;Outras aplicações de algoritmos de busca&lt;/h2&gt;

&lt;p align=&quot;justify&quot;&gt;
    O uso de algoritmos de buscas vai além da inteligência artificial. Tais algoritmos são bastante úteis, e as vezes fundamentais, em diversos outros contextos, tais como sistemas de navegação, logística, roteamento de redes, jogos, bioinformática, dentre diversos outros. Confira a seguir, alguns exemplos de sistemas os quais utilizam esse tipo de algoritmo.
&lt;/p&gt;

&lt;ul align=&quot;justify&quot;&gt;

    &lt;li&gt;
    &lt;strong&gt;Google Maps, Moovit e Waze&lt;/strong&gt;: utiliza algoritmos de busca para fornecer informações de navegação e encontrar rotas entre locais 
    &lt;/li&gt;

    &lt;li&gt;
    &lt;strong&gt;Projeto de um layout de circuito eletrônico em uma PCB&lt;/strong&gt;: otimização do Layout, economia de recursos, adaptação a restrições, etc.
    &lt;/li&gt;

    &lt;li&gt;
    &lt;strong&gt;Rede Nacional de Pesquisa (RNP):&lt;/strong&gt; determinar as melhores rotas de rede, levando em consideração desempenho e segurança, para o tráfego de pesquisa e educação acadêmica no Brasíl.
    &lt;/li&gt;

&lt;/ul&gt;

&lt;h2 id=&quot;discussão-sobre-algoritmos-genéticos&quot;&gt;Discussão sobre algoritmos genéticos&lt;/h2&gt;

&lt;p align=&quot;justify&quot;&gt;
    Segundo o primeiro artigo publicado no GMR Blog &lt;a href=&quot;https://gustavomartins-github.github.io/2023/08/07/AI-2023/&quot;&gt;O que é uma AI?&lt;/a&gt;, a inteligência artificial é uma área interdisciplinar que envolve ciência da computação, biologia, psicologia, etc. Diante disso, com enfase às contribuições da biologia, o biomimetismo torna-se um forte aliado à produção de sistemas inteligêntes que imitam aspectos do comportamento humano, tais como aprendizado, percepção, raciocínio, evolução e adaptação. A &lt;strong&gt;Imagem 1&lt;/strong&gt; a seguir compara algumas tecnologias e suas respectivas inspirações na natureza.
&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&quot;/img/Biomimetismo.png&quot; align=&quot;center&quot; /&gt;
        &lt;figcaption align=&quot;center&quot;&gt;&lt;strong&gt;Imagem 1&lt;/strong&gt;: Técnicas e suas respectivas inspirações (biomimetismo)
            &lt;br /&gt; 
                Ref.: adaptado de &lt;a href=&quot;https://www.inf.ufsc.br/~mauro.roisenberg/ine5377/Cursos-ICA/CE-intro_apost.pdf&quot;&gt;ALGORITMOS GENÉTICOS: PRINCÍPIOS E APLICAÇÕES&lt;/a&gt;, página 1
        &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p align=&quot;justify&quot;&gt;
    Conforme evidenciado a cima, os &lt;strong&gt;Algoritmos Genéticos&lt;/strong&gt; consistem em uma adaptação do princípio Darwiniano de seleção natural, onde o mais adaptado ao meio é capaz de sobreviver e deixar descendentes férteis. Contudo, para entender como tal princípio é aplicado à computação, é necessário fazer algumas analogias. A &lt;strong&gt;Imagem 2&lt;/strong&gt; a seguir apresenta uma comparação entre os elementos da natureza e suas respectivas representação no contexto dos Algoritmos Genéticos.
&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&quot;/img/Biomimetismo2.png&quot; align=&quot;center&quot; /&gt;
        &lt;figcaption align=&quot;center&quot;&gt;&lt;strong&gt;Imagem 2&lt;/strong&gt;: Natureza e suas representações Computacionais (Algoritmos Genéticos)
            &lt;br /&gt; 
                Ref.: adaptado de &lt;a href=&quot;https://www.inf.ufsc.br/~mauro.roisenberg/ine5377/Cursos-ICA/CE-intro_apost.pdf&quot;&gt;ALGORITMOS GENÉTICOS: PRINCÍPIOS E APLICAÇÕES&lt;/a&gt;, página 1
        &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h2 id=&quot;algoritmos-de-busca&quot;&gt;Algoritmos de Busca&lt;/h2&gt;

&lt;p align=&quot;justify&quot;&gt;
    A partir de agora, discutiremos alguns entre os principais algoritmos de proucura, considerando os diferentes tipos de busca abordados neste artigo: busca &lt;u&gt;cega&lt;/u&gt;, &lt;u&gt;informada&lt;/u&gt; e &lt;u&gt;complexa&lt;/u&gt;. A &lt;strong&gt;Imagem 3&lt;/strong&gt; abaixo apresenta os algoritmos a serem apresentados.
&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&quot;/img/Algoritmos.png&quot; align=&quot;center&quot; /&gt;
        &lt;figcaption align=&quot;center&quot;&gt;&lt;strong&gt;Imagem 3&lt;/strong&gt;: algoritmos de busca cega, informada e complexa
            &lt;br /&gt; 
                Ref.: autoria própria
        &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h2 id=&quot;busca-cega&quot;&gt;Busca Cega&lt;/h2&gt;

&lt;p align=&quot;justify&quot;&gt;
    Como já sabemos, a busca cega consiste em uma abordagem na qual o agente explora um espaço de estados (ou espaço de soluções) sem ter informações detalhadas sobre a estrutura desse espaço ou a proximidade da solução desejada. Sendo assim, confira a seguir uma breve discussão e implementação sobre quatro diferentes algoritmos de busca não informada.
&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p align=&quot;justify&quot;&gt;&lt;strong&gt;Breadth-first search (BFS)&lt;/strong&gt;: também conhecido como &quot;Busca em Largura&quot;, esse algoritmo parte de um nó inicial e verifíca todos os elementos do próximo nível e, caso a resposta esteja no nível atual, o objetivo foi alcançado, caso contrário, procura-se no próximo nível e assim por diante. Se a resposta não estiver em nenhum dos níveis do grafo, é uma solução impossível. Essa estratégia utiliza uma &lt;i&gt;queue (FIFO - Frist-in First-out)&lt;/i&gt; e um &lt;u&gt;vetor de visitados&lt;/u&gt; como estrutura de dados auxiliares para se guiar entre os nós de um nível que ainda não foi visitado e, geralmente, é utilizada quando o problema em questão é muito pequeno e a complexidade do espaço não é considerada, além de ser bastante aplicado em buscas envolvendo &lt;u&gt;árvores binárias&lt;/u&gt;. 
&lt;br /&gt;&lt;br /&gt;&lt;strong&gt;Vantagens&lt;/strong&gt;: retorna o caminho mais curto dentre as possibilidades de solução e nunca ficará preso em nós indesejados 
&lt;br /&gt;&lt;strong&gt;Desvantagens&lt;/strong&gt;: alto gasto de memória e tempo a medida em que o grafo aumenta de tamanho &lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p align=&quot;center&quot;&gt; &lt;strong&gt;EXEMPLO&lt;/strong&gt;&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt; &lt;strong&gt;Grafo:&lt;/strong&gt;&lt;/p&gt;
&lt;figure&gt;
    &lt;img src=&quot;/img/Graph01.png&quot; align=&quot;center&quot; /&gt;
        &lt;figcaption align=&quot;center&quot;&gt;&lt;strong&gt;Imagem 4&lt;/strong&gt;: grafo a ser explorado pelo algoritmo Breadth-first search
            &lt;br /&gt; 
                Ref.: &lt;a href=&quot;https://www.analyticsvidhya.com/blog/2021/10/an-introduction-to-problem-solving-using-search-algorithms-for-beginners/&quot;&gt;Analytics Vidhya&lt;/a&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p align=&quot;justify&quot;&gt; &lt;strong&gt;Implementação da solução em &lt;u&gt;python&lt;/u&gt;:&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;
# Ref.: https://www.analyticsvidhya.com/blog/2021/10/an-introduction-to-problem-solving-using-search-algorithms-for-beginners/
&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&quot;&quot;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;graph&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
 &lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
 &lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;D&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;E&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
 &lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;G&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
 &lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;D&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt;
 &lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;E&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt;
 &lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt;
 &lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;G&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;visited&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; 
&lt;span class=&quot;n&quot;&gt;queue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;goal&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;bfs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;visited&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;graph&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;visited&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;queue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;queue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;queue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;pop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; 
        &lt;span class=&quot;nf&quot;&gt;print &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; 
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;neighbour&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;graph&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;neighbour&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;visited&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;visited&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;neighbour&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;queue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;neighbour&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;goal&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;visited&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;bfs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;visited&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;graph&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p align=&quot;justify&quot;&gt; &lt;strong&gt;Depth-first search (DFS)&lt;/strong&gt;: este algoritmo parte do estado inicial e explora cada caminho até sua maior profundidade antes de passar para o próximo caminho (por isso o nome &quot;Busca em Profundidade&quot;). Sendo assim, quando o algorimo encontra um vértice que não possui mais adjacência, ele &lt;u&gt;retrocede&lt;/u&gt; para explorar outras opções, sendo este processo denominado &lt;i&gt;&lt;strong&gt;backtracking&lt;/strong&gt;&lt;/i&gt;.
&lt;br /&gt;&lt;br /&gt;&lt;strong&gt;Vantagens&lt;/strong&gt;: demanda menos uso de memória e tempo em comparação a busca em largura.&lt;br /&gt;&lt;strong&gt;Desvantagens&lt;/strong&gt;: nem sempre garante uma solução e pode ficar preso em um loop infinito a medida em que se aprofunda em um grafo grande&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p align=&quot;center&quot;&gt; &lt;strong&gt;EXEMPLO&lt;/strong&gt;&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt; &lt;strong&gt;Grafo:&lt;/strong&gt;&lt;/p&gt;
&lt;figure&gt;
    &lt;img src=&quot;/img/Graph01.png&quot; align=&quot;center&quot; /&gt;
        &lt;figcaption align=&quot;center&quot;&gt;&lt;strong&gt;Imagem 5&lt;/strong&gt;: grafo a ser explorado pelo algoritmo de busca em profundidade.
            &lt;br /&gt; 
                Ref.: &lt;a href=&quot;https://www.analyticsvidhya.com/blog/2021/10/an-introduction-to-problem-solving-using-search-algorithms-for-beginners/&quot;&gt;Analytics Vidhya&lt;/a&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p align=&quot;justify&quot;&gt; &lt;strong&gt;Implementação da solução em &lt;u&gt;python&lt;/u&gt;:&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;
REF: https://www.analyticsvidhya.com/blog/2021/10/an-introduction-to-problem-solving-using-search-algorithms-for-beginners/
&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&quot;&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;graph&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
 &lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
 &lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;D&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;E&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
 &lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;G&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
 &lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;D&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt;
 &lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;E&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt;
 &lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt;
 &lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;G&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;goal&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;visited&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; 
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;dfs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;visited&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;graph&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;visited&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;print &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;visited&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;neighbour&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;graph&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;goal&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;visited&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;nf&quot;&gt;dfs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;visited&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;graph&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;neighbour&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;dfs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;visited&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;graph&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Uniform Cost Search (UCS)&lt;/strong&gt;: esse algoritmo pesquisa o gráfo dando prioridade máxima ao menor custo &lt;u&gt;acomulado&lt;/u&gt; dentre os caminhos possíveis e, para isso, essa pesquisa uniforme de custos geralmente é implementada usando uma fila de prioridade. Sendo assilsm, é especialmente útil para encontrar o caminho mais curto em um grafo ponderado, isto é, os arcos (arestas) têm custos associados. Ele garante que a busca encontre o caminho de menor custo (quando possível), tornando-o ideal para problemas em que a otimização do custo é importante, como roteamento de mapas ou planejamento de caminhos em sistemas de navegação.
&lt;br /&gt;&lt;br /&gt;&lt;strong&gt;Vantagens&lt;/strong&gt;: é considerada um entre os melhor algoritmo de busca para um grafo ponderado ou grafo com custos e, casa exista, encontra o menor caminho possível de um vértice à outro.
&lt;br /&gt;&lt;strong&gt;Desvantagens&lt;/strong&gt;: não considera quantos passos são necessários para alcançar o caminho mais baixo. Isso também pode resultar em um loop infinito. &amp;lt;/p&amp;gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p align=&quot;center&quot;&gt; &lt;strong&gt;EXEMPLO&lt;/strong&gt;&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt; &lt;strong&gt;Grafo:&lt;/strong&gt;&lt;/p&gt;
&lt;figure&gt;
    &lt;img src=&quot;/img/Graph03.png&quot; align=&quot;center&quot; /&gt;
        &lt;figcaption align=&quot;center&quot;&gt;&lt;strong&gt;Imagem 6&lt;/strong&gt;: grafo a ser explorado pelo algoritmo Uniform Cost Search
            &lt;br /&gt; 
                Ref.: &lt;a href=&quot;https://www.analyticsvidhya.com/blog/2021/10/an-introduction-to-problem-solving-using-search-algorithms-for-beginners/&quot;&gt;Analytics Vidhya&lt;/a&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p align=&quot;justify&quot;&gt; &lt;strong&gt;Implementação da solução em &lt;u&gt;python&lt;/u&gt;:&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;
REF: https://www.analyticsvidhya.com/blog/2021/10/an-introduction-to-problem-solving-using-search-algorithms-for-beginners/
&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&quot;&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;graph&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
       &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
       &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
       &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;E&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
       &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;E&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
       &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;D&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
       &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;D&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
       &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;E&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
       &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;D&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
       &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;G&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;temp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;temp1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;graph&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;temp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;temp1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;nodes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;temp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;union&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;temp1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;UCS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;graph&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;costs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;closed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cur_node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cur_node&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cur_node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;closed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cur_node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;graph&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cur_node&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;costs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;costs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]):&lt;/span&gt;
      &lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;costs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;costs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; -&amp;gt; &lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;costs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cur_node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;999999&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;small&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;min&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;costs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;costs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;small&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;closed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;UCS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;graph&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;costs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;closed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;small&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;costs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;temp_cost&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nodes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;costs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;999999&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; &lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;closed&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;start_node&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Enter the Start State: &lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start_node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start_node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start_node&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;costs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start_node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;UCS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;graph&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;costs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;closed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start_node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;goal_node&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Enter the Goal State: &lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Path with least cost is: &lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;goal_node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;busca-informada&quot;&gt;Busca Informada&lt;/h2&gt;

&lt;p align=&quot;justify&quot;&gt;
    Outro tipo de algoritmo de busca abordado anteriormente é a busca informada. Como mencionado, essas técnicas de busca utiliza informações heurísticas para orientar a exploração em direção a soluções mais promissoras em problemas. Confira a seguir uma breve discussão e implementação sobre três exemplos de algoritmos de busca informada.
&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p align=&quot;justify&quot;&gt;&lt;strong&gt;Best-First Search&lt;/strong&gt;: este algoritimo utiliza função de avaliação (heurística) para optar pelo nó mais promissor entre os nós disponíveis antes de mudar para o próximo. Para isso, utiliza-se duas &lt;i&gt;priority queue&lt;/i&gt; como estrutura de dado auxiliar, uma denominada &lt;u&gt;ABERTA&lt;/u&gt; outra &lt;u&gt;FECHADA&lt;/u&gt;. A primeira monitora os nós imediatos disponíveis para atravessar no momento, enquanto a segunda monitora os nós que já estão sendo transferidos, os quais formarão a resposta final. Sendo a sim, a cada iteração, verifica-se se o nó selecionado é o nó objetivo e, caso não seja, explora-se os nós adjacentes. Para isso, é necessário calcular suas estimativas heurísticas e ranquea-las na fila de prioridade, de forma que o nó mais promissor seja explorado em sequência, e assim por diante.
&lt;br /&gt;&lt;br /&gt;&lt;strong&gt;Vantagens&lt;/strong&gt;: é ideal para os computadores avaliarem o caminho mais curto e apropriado através de um labirinto de possibilidades.
&lt;br /&gt;&lt;strong&gt;Desvantagens&lt;/strong&gt;: demanda o cálculo de heurísticas, o que aumenta consideravelmente a compĺexidade computacional a medida em que o grafo aumenta. &lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p align=&quot;center&quot;&gt; &lt;strong&gt;EXEMPLO&lt;/strong&gt;&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt; &lt;strong&gt;Grafo:&lt;/strong&gt;&lt;/p&gt;
&lt;figure&gt;
    &lt;img src=&quot;/img/Graph02.png&quot; align=&quot;center&quot; /&gt;
        &lt;figcaption align=&quot;center&quot;&gt;&lt;strong&gt;Imagem 7&lt;/strong&gt;: grafo a ser explorado pelo algoritimo de primeira melhor busca.
            &lt;br /&gt; 
                Ref.: &lt;a href=&quot;https://www.geeksforgeeks.org/best-first-search-informed-search/&quot;&gt;GeeksforGeeks&lt;/a&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p align=&quot;justify&quot;&gt; &lt;strong&gt;Implementação da solução em &lt;u&gt;python&lt;/u&gt;:&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;
# REF: https://www.geeksforgeeks.org/best-first-search-informed-search/
&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&quot;&quot;&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;queue&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PriorityQueue&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;14&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;graph&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Function For Implementing Best First Search
# Gives output path having lowest cost
&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;best_first_search&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;actual_Src&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;visited&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;pq&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;PriorityQueue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;pq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;actual_Src&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;visited&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;actual_Src&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;
	
	&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;empty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;u&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;# Displaying the path having lowest cost
&lt;/span&gt;		&lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; &lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;u&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;

		&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;graph&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;visited&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;visited&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;pq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
	&lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Function for adding edges to graph
&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;addedge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cost&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;graph&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cost&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;graph&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cost&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;


&lt;span class=&quot;c1&quot;&gt;# The nodes shown in above example(by alphabets) are
# implemented using integers addedge(x,y,cost);
&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;addedge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;addedge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;addedge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;addedge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;addedge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;addedge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;addedge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;14&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;addedge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;addedge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;addedge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;addedge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;addedge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;addedge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;13&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;source&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;best_first_search&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# This code is contributed by Jyotheeswar Ganne
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p align=&quot;justify&quot;&gt;&lt;strong&gt; (GBeFS)&lt;/strong&gt;: este algoritmo concentra-se em explorar nós que estão mais próximos do objetivo, com base em uma heurística que fornece uma estimativa do custo para atingir o objetivo. Contudo, ele não considera o custo total até o momento, apenas a proximidade ao objetivo. Logo, o Greedy Best-First Search escolhe o nó que parece ser o &quot;melhor&quot; com base na heurística, sem considerar o passado. Isso pode levar a soluções rápidas em alguns casos, mas não garante a solução ótima.
&lt;br /&gt;&lt;br /&gt;&lt;strong&gt;Vantagens&lt;/strong&gt;: sua implementação é relativamente simples, além de ser rápido, eficiênte e requisitar pouca memória.
&lt;br /&gt;&lt;strong&gt;Desvantagens&lt;/strong&gt;: não garante uma solução ótima, pois pode negligenciar áreas do espaço de busca que podem conter soluções melhores &lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p align=&quot;center&quot;&gt; &lt;strong&gt;EXEMPLO&lt;/strong&gt;&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt; &lt;strong&gt;Grafo:&lt;/strong&gt;&lt;/p&gt;
&lt;figure&gt;
    &lt;img src=&quot;/img/Graph04.png&quot; align=&quot;center&quot; /&gt;
        &lt;figcaption align=&quot;center&quot;&gt;&lt;strong&gt;Imagem 8&lt;/strong&gt;: grafo a ser explorado pelo algoritimo GBeFS.
            &lt;br /&gt; 
                Ref.: &lt;a href=&quot;https://python.algorithmexamples.com/web/graphs/greedy_best_first.html&quot;&gt;AlgorithmExamples&lt;/a&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p align=&quot;justify&quot;&gt; &lt;strong&gt;Implementação da solução em &lt;u&gt;python&lt;/u&gt;:&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
130
131
132
133
134
135
136
137
138
139
140
141
142
143
144
145
146
147
148
149
150
151
152
153
154
155
156
157
158
159
160
161
162
163
164
165
166
167
168
169
170
171
172
173
174
175
176
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;
REF: https://python.algorithmexamples.com/web/graphs/greedy_best_first.html
https://en.wikipedia.org/wiki/Best-first_search#Greedy_BFS
Gráfico modelado em matriz de adjacência
&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&quot;&quot;&lt;/span&gt;
 
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;typing&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Tuple&lt;/span&gt;
 
&lt;span class=&quot;n&quot;&gt;grid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# 0 are free path whereas 1&apos;s are obstacles
&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
 
&lt;span class=&quot;n&quot;&gt;delta&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# up, left, down, right
&lt;/span&gt; 
 
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;sh&quot;&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;    &amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;calculate_heuristic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;calculate_heuristic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;
    &lt;span class=&quot;sh&quot;&gt;&quot;&quot;&quot;&lt;/span&gt;
 
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pos_x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pos_y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;goal_x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;goal_y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g_cost&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pos_x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pos_x&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pos_y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pos_y&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pos_y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pos_x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;goal_x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;goal_x&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;goal_y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;goal_y&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;g_cost&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g_cost&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parent&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_cost&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;calculate_heuristic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
 
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;calculate_heuristic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;float&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;sh&quot;&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;
        The heuristic here is the Manhattan Distance
        Could elaborate to offer more than one choice
        &lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&quot;&quot;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;dy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;abs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pos_x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;goal_x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;dx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;abs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pos_y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;goal_y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dy&lt;/span&gt;
 
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__lt__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;other&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;bool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_cost&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;other&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_cost&lt;/span&gt;
 
 
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;GreedyBestFirst&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;sh&quot;&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;    &amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gbf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;GreedyBestFirst&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;grid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;grid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pos&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gbf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;get_successors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gbf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gbf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pos_y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;delta&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gbf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pos_x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;delta&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gbf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pos_y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;delta&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gbf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pos_x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;delta&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gbf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;retrace_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gbf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gbf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;search&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# doctest: +NORMALIZE_WHITESPACE
&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
     &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
    &lt;span class=&quot;sh&quot;&gt;&quot;&quot;&quot;&lt;/span&gt;
 
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;goal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;goal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;goal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;goal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;goal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;goal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;goal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;99999&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
 
        &lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;open_nodes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;closed_nodes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
 
        &lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reached&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;
 
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;search&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Tuple&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]:&lt;/span&gt;
        &lt;span class=&quot;sh&quot;&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;
        Search for the path,
        if a path is not found, only the starting position is returned
        &lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&quot;&quot;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;open_nodes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;# Open Nodes are sorted using __lt__
&lt;/span&gt;            &lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;open_nodes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;current_node&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;open_nodes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;pop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
 
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;current_node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reached&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;retrace_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;current_node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
 
            &lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;closed_nodes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;current_node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;successors&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;get_successors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;current_node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
 
            &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;child_node&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;successors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;child_node&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;closed_nodes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;continue&lt;/span&gt;
 
                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;child_node&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;open_nodes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;open_nodes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;child_node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                    &lt;span class=&quot;c1&quot;&gt;# retrieve the best current path
&lt;/span&gt;                    &lt;span class=&quot;n&quot;&gt;better_node&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;open_nodes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;pop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;open_nodes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;child_node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
 
                    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;child_node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;g_cost&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;better_node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;g_cost&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;open_nodes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;child_node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;open_nodes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;better_node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
 
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reached&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
 
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get_successors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt;
        &lt;span class=&quot;sh&quot;&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;
        Returns a list of successors (both in the grid and free spaces)
        &lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&quot;&quot;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;successors&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;action&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;delta&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;pos_x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pos_x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;pos_y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pos_y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
 
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pos_x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;grid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pos_y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;grid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;continue&lt;/span&gt;
 
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;grid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pos_y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pos_x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;continue&lt;/span&gt;
 
            &lt;span class=&quot;n&quot;&gt;successors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
                &lt;span class=&quot;nc&quot;&gt;Node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;pos_x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;pos_y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pos_y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pos_x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;parent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;g_cost&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;parent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;successors&lt;/span&gt;
 
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;retrace_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Tuple&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]:&lt;/span&gt;
        &lt;span class=&quot;sh&quot;&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;
        Retrace the path from parents to parents until start node
        &lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&quot;&quot;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;current_node&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;current_node&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;current_node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pos_y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;current_node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pos_x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;current_node&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;current_node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parent&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;reverse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;
 
 
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__name__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;__main__&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;init&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;goal&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;grid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;grid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;elem&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;grid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;elem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
 
    &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;------&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
 
    &lt;span class=&quot;n&quot;&gt;greedy_bf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;GreedyBestFirst&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;goal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;greedy_bf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;search&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
 
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;elem&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;grid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;elem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;elem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
 
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;elem&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;grid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;elem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p align=&quot;justify&quot;&gt;&lt;strong&gt;A∗ search&lt;/strong&gt;: este algoritmo busca o menor caminho entre dois vértices de um grafo usando valores de duas funções responsáveis por &lt;u&gt;estimar o melhor caminho em relação ao custo acumulado do caminho percorrido&lt;/u&gt; e o &lt;u&gt;valor restante necessário até o destino&lt;/u&gt;. Sendo assim, a soma desses dois valores estimam o caminho mais eficiente entre o destino e a origem. Por fim, é importante considerar que, quanto menor for este valor, menos custoso será o trajeto calculado.
&lt;br /&gt;&lt;br /&gt;&lt;strong&gt;Vantagens&lt;/strong&gt;: algoritmo muito eficiênte e garante uma solução ótima.
&lt;br /&gt;&lt;strong&gt;Desvantagens&lt;/strong&gt;: usa muita memória e consideravelmente mais complexo que todos os outros algoritmos apresentados. O site &lt;a href=&quot;https://www.geeksforgeeks.org/a-search-algorithm/&quot;&gt;GeegsForGeeks&lt;/a&gt; apresenta um bom exemplo de implementação. &lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;busca-complexa&quot;&gt;Busca Complexa&lt;/h2&gt;

&lt;p align=&quot;justify&quot;&gt;
    Alguns problemas, como otimização e planejamento, possuem um alto grau de dificuldade em encontrar soluções. Como dito no artigo anterior &lt;a href=&quot;https://gustavomartins-github.github.io/2023/10/25/P2/&quot;&gt;Solução de Problemas em Inteligência Artificial&lt;/a&gt;, para estes problemas, as vezes é mais interessante preocupar-se apenas com o estado final, e não com o caminho até ele, sendo a &lt;strong&gt;Busca Local&lt;/strong&gt; uma das principais abordagens utilizadas nessas situações.
&lt;/p&gt;

&lt;p align=&quot;justify&quot;&gt;
    Esse abordagem começa com uma solução inicial e faz pequenas alterações nela para melhorar progressivamente a solução por meio da exploração de soluções próximas. Para isso, ao considerar um &lt;u&gt;espaço de estados&lt;/u&gt;, isto é, conjunto de todas as possíveis soluções viáveis para o problema, deve-se verificar a elevação: uma melhora ou aumento no valor da função objetivo.
&lt;/p&gt;

&lt;p align=&quot;justify&quot;&gt;
    Mas o que seria a &lt;u&gt;Função Objetivo&lt;/u&gt;? Também conhecida como &lt;u&gt;Função de Custo&lt;/u&gt; ela rerpesenta uma quantificação do desempenho das soluções possíveis para o problema. A &lt;strong&gt;Imagem 6&lt;/strong&gt; a seguir apresenta uma síntese desses conceitos em um plano cartesiano Função Objetivo X Espaço de Estado (contem os estados possíveis).
&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&quot;/img/BuscaLocal.png&quot; align=&quot;center&quot; /&gt;
        &lt;figcaption align=&quot;center&quot;&gt;&lt;strong&gt;Imagem 9&lt;/strong&gt;: plano cartesiano Função Objetivo Vs Spaço de Estados
            &lt;br /&gt; 
                Ref.: material didático da disciplina de Inteligência Artificial da FGA (2023.2).
        &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p align=&quot;justify&quot;&gt;
    Diante do exposto, pode-se entender a busca local como um processo iterativo que vai continuamente de encontro à um valor cada vez maior de desempenho, sendo o fim do algoritmo determinado pelo encontro de um determinado pico, isto é, onde os valores vizinhos não possuem valor maior que o valor atual. 
&lt;/p&gt;

&lt;p align=&quot;justify&quot;&gt;
    Este processo de busca pela solução de maior desempenho segue duas premissas principais: se a elevação corresponde a função objetivo, a meta é encontrar o maior pico (Hill Climbing), agora se a elevação corresponder ao custo, a meta é encontrar o vale mais baixo (gradient descent). Mas será que isso garante o encontro do maior pico possível? A resposta é depende. É nesse contexto que algumas técnicas se fazem presente. São elas:
&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt; Escalada estocástica (Stochastic hill climbing)&lt;/strong&gt;: escolhe aleatoriamente os caminhos ascendentes;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt; Escalada de primeira escolha (First-choice hill climbing)&lt;/strong&gt;: Escolhe sucessores aleatoriamente até que um melhor seja escolhido;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt; Escalada com reinicialização aleatória (Random-restart hill climbing)&lt;/strong&gt;: executa diversos hill climbing iniciando em posições aleatórias;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt; Recozimento simulado (Simulated annealing)&lt;/strong&gt;: Uma versão de stochastic hill climbing onde alguns movimento descendentes são permitidos&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt; Busca de feixe local (Local beam Search)&lt;/strong&gt;: O algoritmo acompanha k estados ao invés de apenas um;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;alguns-outros-algoritmos-de-busca&quot;&gt;Alguns outros algoritmos de busca&lt;/h2&gt;

&lt;p align=&quot;justify&quot;&gt;
    Além dos algoritmos apresentados até então, existem diversos outros algoritmos de busca cega, informada ou complexa, e o mesmo vale para os algoritmos genéticos. Sendo assim, este tópico apresentará alguns novos algoritmos, como o &lt;strong&gt;DLS (Depth-limited search)&lt;/strong&gt;, que consiste em uma variante da DFS que limita a profundidade da exploração, o &lt;strong&gt; Jump Search&lt;/strong&gt;, que consiste em um algoritmo de busca que separa as informações em blocos e proucura no bloco mais próximo da solução e, por fim, o algoritmo genético conhecido como 
&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p align=&quot;justify&quot;&gt;&lt;strong&gt;DLS (Depth-limited search) - Busca Cega&lt;/strong&gt;: funciona de maneira similar à DFS (Deph-Frist Search), com o acréscimo de uma restrição a qual limita ae onde poderá atravessar os nós, resolvendo eventuais problemas de caminho infinito da DFS.
&lt;br /&gt;&lt;br /&gt;&lt;strong&gt;Vantagens&lt;/strong&gt;: as mesmas da DFS, com adição de proteção à caminhos infinitos e economia de memória.
&lt;br /&gt;&lt;strong&gt;Desvantagens&lt;/strong&gt;: assim como a DFS, nem sempre garantirá uma solução&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p align=&quot;center&quot;&gt; &lt;strong&gt;EXEMPLO&lt;/strong&gt;&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt; &lt;strong&gt;Grafo:&lt;/strong&gt;&lt;/p&gt;
&lt;figure&gt;
    &lt;img src=&quot;/img/Graph05.png&quot; align=&quot;center&quot; /&gt;
        &lt;figcaption align=&quot;center&quot;&gt;&lt;strong&gt;Imagem 10&lt;/strong&gt;: grafo a ser explorado pelo algoritimo DLS.
            &lt;br /&gt; 
                Ref.: &lt;a href=&quot;https://www.analyticsvidhya.com/blog/2021/10/an-introduction-to-problem-solving-using-search-algorithms-for-beginners/&quot;&gt;Analtytics Vidhya&lt;/a&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p align=&quot;justify&quot;&gt; &lt;strong&gt;Implementação da solução em &lt;u&gt;python&lt;/u&gt;:&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;
REF: https://www.analyticsvidhya.com/blog/2021/10/an-introduction-to-problem-solving-using-search-algorithms-for-beginners/ 
&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&quot;&quot;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;graph&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
 &lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
 &lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;D&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;E&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
 &lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;G&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
 &lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;D&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt;
 &lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;E&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt;
 &lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt;
 &lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;G&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;DLS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;goal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;level&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;maxD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Level atual--&amp;gt;&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;level&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;goal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Teste de meta bem-sucedido&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Falha no teste do nó de destino&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;level&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;maxD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Expandindo o nó atual&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;child&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;graph&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DLS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;child&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;goal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;level&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;maxD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;pop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;goal&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Insira o nó de destino: &lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;maxD&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Insira o limite máximo de profundidade: &lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DLS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;goal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;maxD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Caminho para o nó de destino disponível&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Caminho&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Nenhum caminho disponível para o nó de destino em determinado limite de profundidade&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p align=&quot;justify&quot;&gt; &lt;strong&gt;Saída:&lt;/strong&gt;&lt;/p&gt;
&lt;figure&gt;
    &lt;img src=&quot;/img/Output1.png&quot; align=&quot;center&quot; /&gt;
        &lt;figcaption align=&quot;center&quot;&gt;&lt;strong&gt;Imagem 11&lt;/strong&gt;: solução da DLS para busca do nó A até o C.
            &lt;br /&gt; 
                Ref.: autoria própria
        &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p align=&quot;justify&quot;&gt;&lt;strong&gt;Jump Search (Pesquisa de Blocos)- Busca Informada&lt;/strong&gt;: funciona dividindo uma estrutura de dados (estática) em blocos de tamanho fixo e, em seguida, aplicando uma busca linear nos blocos até encontrar o bloco que provavelmente contém o valor desejado. Uma vez encontrado o bloco apropriado (mais próximo da solução), uma busca linear é realizada apenas nesse bloco, reduzindo o número de comparações necessárias. Contudo, para que isso seja possível, essa busca aproveita a informação de que a estrutura de dados está previamente ordenada, o que configura esse algoritmo como informado.
&lt;br /&gt;&lt;br /&gt;&lt;strong&gt;Vantagens&lt;/strong&gt;: bastante eficiênte em estruturas de dados estáticas e não querer memória memória adicional significativa.
&lt;br /&gt;&lt;strong&gt;Desvantagens&lt;/strong&gt;: precisa da garantia de que a estrutura esteja ordenada e torna-se cada vez mais ineficaz a medida em que os dados não estejam uniformemente distribuidos&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p align=&quot;center&quot;&gt; &lt;strong&gt;EXEMPLO&lt;/strong&gt;&lt;/p&gt;

&lt;p align=&quot;justify&quot;&gt; &lt;strong&gt;Objetivo&lt;/strong&gt;: encontrar o índice do elemento 55 dentro da array &lt;strong&gt;arr&lt;/strong&gt; = [ 0, 1, 1, 2, 3, 5, 8, 13, 21,34, 55, 89, 144, 233, 377, 610 ].&lt;/p&gt;

&lt;p align=&quot;justify&quot;&gt; &lt;strong&gt;Implementação da solução em &lt;u&gt;python&lt;/u&gt;:&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;
REF: https://www.geeksforgeeks.org/jump-search/
&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&quot;&quot;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# Python3 code to implement Jump Search
&lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;math&lt;/span&gt;
 
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;jumpSearch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
     
    &lt;span class=&quot;c1&quot;&gt;# Finding block size to be jumped
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;step&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;math&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;sqrt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
     
    &lt;span class=&quot;c1&quot;&gt;# Finding the block where element is
&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;# present (if it is present)
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;prev&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;min&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;step&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;prev&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;step&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;step&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;math&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;sqrt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prev&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
     
    &lt;span class=&quot;c1&quot;&gt;# Doing a linear search for x in 
&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;# block beginning with prev.
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prev&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;prev&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
         
        &lt;span class=&quot;c1&quot;&gt;# If we reached next block or end 
&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;# of array, element is not present.
&lt;/span&gt;        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prev&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;min&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;step&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
     
    &lt;span class=&quot;c1&quot;&gt;# If element is found
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prev&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prev&lt;/span&gt;
     
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
 
&lt;span class=&quot;c1&quot;&gt;# Driver code to test function
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;13&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;21&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;34&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;55&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;89&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;144&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;233&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;377&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;610&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;55&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
 
&lt;span class=&quot;c1&quot;&gt;# Find the index of &apos;x&apos; using Jump Search
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;jumpSearch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
 
&lt;span class=&quot;c1&quot;&gt;# Print the index where &apos;x&apos; is located
&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Number&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;is at index&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;%.0f&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
 
&lt;span class=&quot;c1&quot;&gt;# This code is contributed by &quot;Sharad_Bhardwaj&quot;.
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p align=&quot;justify&quot;&gt; &lt;strong&gt;Saída:&lt;/strong&gt;&lt;/p&gt;
&lt;figure&gt;
    &lt;img src=&quot;/img/Output2.png&quot; align=&quot;center&quot; /&gt;
        &lt;figcaption align=&quot;center&quot;&gt;&lt;strong&gt;Imagem 12&lt;/strong&gt;: solução da Jumper Search para encontrar o elemento 55 dentro da array &quot;&lt;strong&gt;arr&lt;/strong&gt;&quot;.
            &lt;br /&gt; 
                Ref.: autoria própria
        &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p align=&quot;justify&quot;&gt;&lt;strong&gt;Algoritmo Genético para Otimização Contínua de Funções - Algoritmo Genético&lt;/strong&gt;: uma classe de algoritmos de busca heurística que visam encontrar a melhor solução para um problema de otimização de funções. Como dito anteriormente, esses algoritmos são inspirados na teoria da evolução e na genética, onde os princípios de seleção natural são aplicados a soluções candidatas para encontrar a solução ótima ou aproximadamente ótima para um problema.
&lt;br /&gt;&lt;br /&gt;&lt;strong&gt;Vantagens&lt;/strong&gt;: exploração eficiente do espaço de busca em ambientes complexos e se adapta para múltiplos objetivos
&lt;br /&gt;&lt;strong&gt;Desvantagens&lt;/strong&gt;: não garante solução ótima e possui uma configuração sensível, isto é, altamente dependente da escolha adequada dos parâmetros (tamanho da população, taxa de mutação, etc).&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p align=&quot;center&quot;&gt; &lt;strong&gt;EXEMPLO&lt;/strong&gt;&lt;/p&gt;

&lt;p align=&quot;justify&quot;&gt; &lt;strong&gt;Objetivo&lt;/strong&gt;: encontrar o valor mínimo da função &lt;i&gt;f(x) = x^2 + y^2&lt;/i&gt;. (Vmin = f(0,0) = 0,0)&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
101
102
103
104
105
106
107
108
109
110
111
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;
# genetic algorithm search for continuous function optimization
REF: https://machinelearningmastery.com/simple-genetic-algorithm-from-scratch-in-python/
&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&quot;&quot;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numpy.random&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;randint&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numpy.random&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rand&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# objective function
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;objective&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;2.0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;2.0&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# decode bitstring to numbers
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;decode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bounds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n_bits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bitstring&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;decoded&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;largest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n_bits&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bounds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)):&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;# extract the substring
&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n_bits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n_bits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n_bits&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;substring&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bitstring&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;# convert bitstring to a string of chars
&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;chars&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sh&quot;&gt;&apos;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;substring&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;# convert string to integer
&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;integer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;chars&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;# scale integer to desired range
&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bounds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;largest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bounds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bounds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;# store
&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;decoded&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;decoded&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# tournament selection
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;selection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scores&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;# first random selection
&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;selection_ix&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;randint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ix&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;randint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;# check if better (e.g. perform a tournament)
&lt;/span&gt;		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scores&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scores&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;selection_ix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;selection_ix&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ix&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;selection_ix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# crossover two parents to create two children
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;crossover&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r_cross&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;# children are copies of parents by default
&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;c1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;copy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;copy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;# check for recombination
&lt;/span&gt;	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;rand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r_cross&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;# select crossover point that is not on the end of the string
&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;pt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;randint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;# perform crossover
&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;c1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:]&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;c2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:]&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# mutation operator
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;mutation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bitstring&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r_mut&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bitstring&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)):&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;# check for a mutation
&lt;/span&gt;		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;rand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r_mut&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
			&lt;span class=&quot;c1&quot;&gt;# flip the bit
&lt;/span&gt;			&lt;span class=&quot;n&quot;&gt;bitstring&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bitstring&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# genetic algorithm
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;genetic_algorithm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objective&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bounds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n_bits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n_iter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n_pop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r_cross&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r_mut&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;# initial population of random bitstring
&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;pop&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;randint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n_bits&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bounds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;tolist&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n_pop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;# keep track of best solution
&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;best&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;best_eval&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;objective&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;decode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bounds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n_bits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]))&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;# enumerate generations
&lt;/span&gt;	&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gen&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n_iter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;# decode population
&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;decoded&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;decode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bounds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n_bits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;# evaluate all candidates in the population
&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;scores&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;objective&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;decoded&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;# check for new best solution
&lt;/span&gt;		&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n_pop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scores&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;best_eval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;best&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;best_eval&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scores&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
				&lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;gt;%d, new best f(%s) = %f&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;decoded&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scores&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]))&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;# select parents
&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;selected&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;selection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scores&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n_pop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;# create the next generation
&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;children&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n_pop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
			&lt;span class=&quot;c1&quot;&gt;# get selected parents in pairs
&lt;/span&gt;			&lt;span class=&quot;n&quot;&gt;p1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;selected&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;selected&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
			&lt;span class=&quot;c1&quot;&gt;# crossover and mutation
&lt;/span&gt;			&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;crossover&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r_cross&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
				&lt;span class=&quot;c1&quot;&gt;# mutation
&lt;/span&gt;				&lt;span class=&quot;nf&quot;&gt;mutation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r_mut&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
				&lt;span class=&quot;c1&quot;&gt;# store for next generation
&lt;/span&gt;				&lt;span class=&quot;n&quot;&gt;children&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;# replace population
&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;pop&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;children&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;best&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;best_eval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# define range for input
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bounds&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;5.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;5.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;5.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;5.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# define the total iterations
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n_iter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# bits per variable
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n_bits&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# define the population size
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n_pop&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# crossover rate
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r_cross&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.9&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# mutation rate
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r_mut&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;float&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n_bits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bounds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# perform the genetic algorithm search
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;best&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;score&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;genetic_algorithm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objective&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bounds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n_bits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n_iter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n_pop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r_cross&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r_mut&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Done!&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;decoded&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;decode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bounds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n_bits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;best&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;f(%s) = %f&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;decoded&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;score&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p align=&quot;justify&quot;&gt; &lt;strong&gt;Saída:&lt;/strong&gt;&lt;/p&gt;
&lt;figure&gt;
    &lt;img src=&quot;/img/Output3.png&quot; align=&quot;center&quot; /&gt;
        &lt;figcaption align=&quot;center&quot;&gt;&lt;strong&gt;Imagem 13&lt;/strong&gt;: solução do algoritmo genético para otimização da função &lt;i&gt;f(x) = x^2 + y^2&lt;/i&gt;&quot;. 
            &lt;br /&gt; 
                Ref.: autoria própria
        &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h2 id=&quot;conclusão&quot;&gt;Conclusão&lt;/h2&gt;

&lt;p align=&quot;justify&quot;&gt;
    Diante do exposto, percebe-se os algoritmos de busca possuem uma ampla gama de aplicações, além de poderem ser divididos em grupos de classificação, como algoritmos de busca cega, informada e complexa, havendo vantagens e desvantagens para cada um deles. Não obstante, em problemas de alto nível de complexidade como otimização, algoritmos genéticos e algoritmos de busca local são ótimas opções, havendo diversas técnicas de implementação de cada um desses dois tipos de algoritmos, sendo elas escolhidas de acordo com o problema a ser resolvido. Logo, pode-se dizer que tais algoritmos são fundamentais para as tecnologias de inteligência artificial, impactando diretamente na solução de diversos problemas.
&lt;/p&gt;

&lt;h2 id=&quot;impressões-finais-do-autor&quot;&gt;Impressões Finais do Autor&lt;/h2&gt;

&lt;p align=&quot;justify&quot;&gt;
&lt;a href=&quot;https://gustavomartins-github.github.io/about/&quot;&gt;Eu&lt;/a&gt;, como estudante de Engenharia de Software e amante de algoritmos de computadores, me vi muito interessado sobre o conteúdo abordado desde o início. Aprendi algumas utilidades novas para algoritmos de busca que aprendi no passado, assim como entrei em contato com novos algoritmos os quais expandem minhas ferramentas de solução de problemas, como o caso dos algoritmos genéticos. Aprendi que a solução de problemas por meio de agentes envolve diversas áreas do conhecimento dentro do universo da computação, como algoritmos de busca e suas aplicações, as quais variam de acordo com o contexto. Por fim, vale ressaltar que fiquei bastante intrigado com o biomimetismo dos algoritmos genéticos, pois provam mais uma vez a grande capacidade humana de observar a natureza e imita-la para criação de tecnologias e soluções de problemas.
&lt;/p&gt;

&lt;h2 id=&quot;referências-bibliográficas&quot;&gt;Referências Bibliográficas&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;ALGORITMO genético simples do zero em Python. [S. l.], 12 out. 2021. Disponível em: https://machinelearningmastery.com/simple-genetic-algorithm-from-scratch-in-python/. Acesso em: 29 out. 2023.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;JUMP Search. [S. l.], 25 abr. 2023. Disponível em: https://www.geeksforgeeks.org/jump-search/. Acesso em: 28 out. 2023.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;BEST First Search: Informed Search. [S. l.], 21 fev. 2023. Disponível em: https://www.geeksforgeeks.org/best-first-search-informed-search/. Acesso em: 28 out. 2023.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;A* Search Algorithm. [S. l.], 8 mar. 2023. Disponível em: https://www.geeksforgeeks.org/a-search-algorithm/. Acesso em: 29 out. 2023.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;AN Introduction to Problem-Solving using Search Algorithms for Beginners. [S. l.]. Disponível em: https://www.analyticsvidhya.com/blog/2021/10/an-introduction-to-problem-solving-using-search-algorithms-for-beginners/. Acesso em: 28 out. 2023.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;BEST First Search in Artificial Intelligence. [S. l.]. Disponível em: https://www.analyticsvidhya.com/blog/2023/09/best-first-search-in-artificial-intelligence/. Acesso em: 28 out. 2023.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;ENGENHARIA HÍBRIDA. Placas Eletrônicas (PCB/PCI): O que são e para que servem?. [S. l.], 17 out. 2023. Disponível em: https://www.engenhariahibrida.com.br/post/placas-eletronicas-o-que-sao-para-que-servem. Acesso em: 27 out. 2023.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;PROBLEMA do caixeiro-viajante. [S. l.], 19 jun. 2023. Disponível em: https://pt.wikipedia.org/wiki/Problema_do_caixeiro-viajante. Acesso em: 27 jan. 2023.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;GO. [S. l.], 13 out. 2023. Disponível em: https://pt.wikipedia.org/wiki/Go. Acesso em: 27 out. 2023.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;ALGORITMOS de Busca para Inteligência Artificial. [S. l.], 3 jul. 2020. Disponível em: https://ricardomatsumura.medium.com/algoritmos-de-busca-para-intelig%C3%AAncia-artificial-7cb81172396c. Acesso em: 26 out. 2023.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;ALGORITMOS GENÉTICOS: PRINCÍPIOS E APLICAÇÕES. ICA: Laboratório de Inteligência Computacional Aplicada, [s. l.]. Disponível em: https://www.inf.ufsc.br/~mauro.roisenberg/ine5377/Cursos-ICA/CE-intro_apost.pdf. Acesso em: 25 out. 2023.&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        <pubDate>Fri, 27 Oct 2023 17:30:00 -0300</pubDate>
        <link>http://localhost:4000/2023/10/27/P2-2023/</link>
        <guid isPermaLink="true">http://localhost:4000/2023/10/27/P2-2023/</guid>
        
        <category>Portifólio 2</category>
        
        
      </item>
    
      <item>
        <title>Solução de Problemas em Inteligência Artificial</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;“A inteligência artificial pode descobrir soluções para problemas do passado, que mudarão a nossa forma de resolver os mesmos problemas no futuro.” — &lt;strong&gt;Dawiny Bastos&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;impressões-iniciais-do-autor&quot;&gt;Impressões Iniciais do Autor&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;“Creio que esta etapa do conteúdo de inteligência artificial seja uma das mais importantes, visto que, aparentemente, aprenderemos na prática como os algoritmos de solução de problemas são implementados no contexto da inteligência artificial. Contudo, mesmo tendo muito interesse, confeso que estou em dúvida quanto aos algoritmos que aprenderemos, pois tenho noção do quão dificil essa área da computação pode ser a medida em que nos aprofundamos em algoritmos mais sofisticados.” — &lt;strong&gt;Gustavo Martins Ribeiro&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;introdução&quot;&gt;Introdução&lt;/h2&gt;

&lt;p align=&quot;justify&quot;&gt;
A solução de problemas por meio de agentes de inteligência de artificial varia a depender da natureza do problema. Sendo assim, algumas etapas se fazem necessárias para chegar a uma solução satisfatória, assim como o conhecimento de algoritmos de computadores, como buscas, ordenação, complexidade, etc. Sendo assim, o presente artigo tem como finalidade investigar tal assunto de suma importância na era da tecnologia da informação.
&lt;/p&gt;

&lt;h2 id=&quot;agente-de-soluções-de-problemas&quot;&gt;Agente de Soluções de Problemas&lt;/h2&gt;

&lt;p align=&quot;justify&quot;&gt;
Como dito no artigo &lt;a href=&quot;https://gustavomartins-github.github.io/2023/08/10/AI-2023/&quot;&gt;Agentes e ambientes&lt;/a&gt;, um agente refere-se a uma entidade capaz tomar decisões com base em sua percepção do ambiente, a fim de executar ações para alcançar metas ou objetivos específicos. Sendo assim, é de suma importância a formulação do problema e de tais objetivos, para que o agente possa elaborar os estados e ações necessárias para atingi-los.
&lt;/p&gt;

&lt;p align=&quot;justify&quot;&gt;
Somado a isso, antes de tomar qualquer ação, o agente simula sequências de ações em seu modelo para encontrar uma solução, sendo tais ações geralmente orientadas por algoritmos de busca. Diante disso, existem diversos algoritmos disponíveis, sendo o problema a ser resolvido determinante para a escolha de um algoritmo em específico. A &lt;strong&gt;Imagem 1&lt;/strong&gt; a seguir contem uma sequência de etapas necessárias para um agente solucionar problemas. 
&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&quot;/img/AgenteDeSolução.png&quot; align=&quot;center&quot; /&gt;
        &lt;figcaption align=&quot;center&quot;&gt;&lt;strong&gt;Imagem 1&lt;/strong&gt;: Etapas para solução de problemas por um agente
            &lt;br /&gt; 
                Ref.: autoria própria
        &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h2 id=&quot;problemas-malha-aberta-vs-malha-fechada&quot;&gt;Problemas: Malha Aberta VS Malha Fechada&lt;/h2&gt;

&lt;p align=&quot;justify&quot;&gt;
Ao analisar a etapa de &lt;u&gt;formulação do problema&lt;/u&gt;, pode-se agrupar os diferentes problemas em dois tipos principais: &lt;strong&gt;malha aberta&lt;/strong&gt; e &lt;strong&gt;malha fechada&lt;/strong&gt;. O primeiro refere-se àqueles em que não há elementos de incerteza, isto é, tem-se conhecimento sobre todas as variáveis e condições, tornando previsível os resultados das ações (Determinístico). Por outro lado, problemas de malha fechada são aqueles onde os resultados podem variar devido a fatores de aleatoriedade, visto a presença de elementos de incerteza (Não Determinísticos). A &lt;strong&gt;Imagem 2&lt;/strong&gt; resume a diferença entre os dois tipos apresentados.
&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&quot;/img/MalhaAberta_VS_MalhaFechada.png&quot; align=&quot;center&quot; /&gt;
        &lt;figcaption align=&quot;center&quot;&gt;&lt;strong&gt;Imagem 2&lt;/strong&gt;: Problemas de Malha Aberta Vs Malha Fechada
            &lt;br /&gt; 
                Ref.: autoria própria
        &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h2 id=&quot;algoritmos-de-busca&quot;&gt;Algoritmos de Busca&lt;/h2&gt;

&lt;p align=&quot;justify&quot;&gt;
Agora sobre a etapa de Busca, primeiro é importante entender o que seria um &quot;algoritmo de busca&quot;. Na ciência da computação e na matemática, algoritmos de busca são aqueles utilizados para encontrar algo em específico dentro de   um conjunto de dados, a fim de resolver um determinado problema. Na prática, há diversas aplicações para tais algoritmos, como encontrar elementos dentro de determinadas estruturas de dados, navegação em mapas como o Google Maps e Moovit, otimização, etc.
&lt;/p&gt;

&lt;p align=&quot;justify&quot;&gt;
Diante do exposto, podemos dividir os &lt;u&gt;algoritmos de busca tradicionais&lt;/u&gt; em dois grupos genéricos: algoritmos de &lt;u&gt;busca cega&lt;/u&gt; e algoritmos de &lt;u&gt;busca informada&lt;/u&gt;. Em resumo, a diferença fundamental entre os dois tipos consiste na utilização de informações específicas do problema durante a busca, sendo a busca informada mais eficaz para encontrar soluções em espaços de busca complexos devido ao fato de utilizar conhecimento, heurísticas e até mesmo medidas arbitrárias para orientar o processo, enquanto a busca cega utiliza abordagens mais genéricas. A &lt;strong&gt;Imagem 3&lt;/strong&gt; a seguir apresenta mais detalhes sobre a diferença entre os dois tipos apresentados.
&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&quot;/img/CegaVSGuiada.png&quot; align=&quot;center&quot; /&gt;
        &lt;figcaption align=&quot;center&quot;&gt;&lt;strong&gt;Imagem 3&lt;/strong&gt;: Busca Cega VS Busca Guiada
            &lt;br /&gt; 
                Ref.: autoria própria
        &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p align=&quot;justify&quot;&gt;
    &lt;strong&gt;Obs.:&lt;/strong&gt; o artigo &lt;a herf=&quot;&quot;&gt;Algoritmos de Busca em AI&lt;/a&gt; apresenta alguns exemplos de algoritmos de busca utilizados em tecnologias de inteligência artificial.
&lt;/p&gt;

&lt;h2 id=&quot;funções-heurísticas&quot;&gt;Funções Heurísticas&lt;/h2&gt;

&lt;p align=&quot;justify&quot;&gt;
Como mencionado no tópico anterior, as informações dentro de uma busca informada vêm por meio das &lt;strong&gt;Funções Heurísticas&lt;/strong&gt;. Sendo assim, tas funções são utilizadas por algoritmos de busca informada para &lt;u&gt;estimar&lt;/u&gt; o quão perto um estado ou ação está da solução almejada. Além disso, elas atribuem valores ou custos aos estados com base em conhecimento específico do problema, ajudando tais algoritmos à priorizada a exploração dos &lt;u&gt; estados promissores &lt;/u&gt;, tornando o processo de busca mais eficaz.
&lt;/p&gt;

&lt;h2 id=&quot;busca-em-ambientes-complexos&quot;&gt;Busca em Ambientes Complexos&lt;/h2&gt;

&lt;p align=&quot;justify&quot;&gt;
Quando se fala sobre algoritmos de busca, geralmente preocupa-se em encontrar um caminho considerando um espaço de busca. Contudo, em determinados problemas, é mais interessante preocupar-se apenas com o estado final, e não com o caminho até ele. Sendo assim, pode-se entender buscas em ambientes complexos como uma procura por soluções ou informações em situações desafiadoras, onde múltiplos fatores, incertezas e interações complicam a tarefa.
&lt;/p&gt;

&lt;p align=&quot;justify&quot;&gt;
Uma abordagem muito utilizada para busca nesse nível de complexidade é a &lt;strong&gt;Busca Local&lt;/strong&gt;. Essa classe de algoritmo opera proucurando, a partir de um estado inicial, os estados vizinhos, sem acompanhar os caminhos nem o conjunto de estados que já foram alcançados. Em outras palavras, esse tipo de algoritmo é não sistemático, pois podem nunca explorar uma parte do espaço de busca que, por sua vez, pode conter a solução. Por outro lado, esses algoritmos utilizam muita pouca memória e podem encontrar soluções razoáveis onde algoritmos sistemáticos não funcionam bem.
&lt;/p&gt;

&lt;h2 id=&quot;algoritmos-genéticos&quot;&gt;Algoritmos Genéticos&lt;/h2&gt;

&lt;p align=&quot;justify&quot;&gt;
Algoritmos genéticos são uma classe de algoritmos de otimização inspirados no processo de seleção natural de Darwin. Eles são usados para resolver problemas de otimização e proucura, particularmente em cenários complexos ou quando não é possível encontrar soluções ótimas usando abordagens tradicionais. Tais algoritmos partem do pressuposto que há uma população de indivíduos (estados), onde os mais aptos (valor mais alto de uma função, por exemplo) produzem descendentes (novos estados) que povoam a próxima geração de estados por meio de um processo denominado &lt;strong&gt;recombinação&lt;/strong&gt;, o qual pode acabar gerando mutações (pequenas alterações ou perturbações aleatórias nas soluções candidatas). Tais algoritmos consideram as seguintes parâmetros:
&lt;/p&gt;

&lt;ul align=&quot;justify&quot;&gt;

    &lt;li&gt; 
    &lt;strong&gt;Tamanho da População Inicial&lt;/strong&gt;: número de exemplos/amostras de soluções candidatas no início.
    &lt;/li&gt;

    &lt;li&gt;
    &lt;strong&gt;Número de Parentes&lt;/strong&gt;: refere-se ao número de soluções candidatas que serão selecionadas como pais para a reprodução em uma determinada geração. Em geral, considera-se o número de parentes como 2.
    &lt;/li&gt;
    
    &lt;li&gt; 
    &lt;strong&gt;Representação de cada indivíduo&lt;/strong&gt;: cada indivíduo dentro da população é representada como uma solução candidata que será avaliada quanto à sua qualidade em relação ao objetivo do problema
    &lt;/li&gt;  

    &lt;li&gt; 
    &lt;strong&gt;Seleção&lt;/strong&gt;: as soluções melhores avaliadas são selecionadas para reprodução. Tais soluções possuem maior probabilidade de serem escolhidas, mas não exclui a seleção de soluções menos promissoras
    &lt;/li&gt;

    &lt;li&gt; 
    &lt;strong&gt;Procedimento de Recombinação (Cruzamento)&lt;/strong&gt;: os pares de soluções selecionadas são combinados para criar descendentes. Isso simula a troca de informações genéticas na reprodução, criando novas soluções por meio da mistura entre características de ambos os pais ou por meio de mutação.
    &lt;/li&gt;

    &lt;li&gt; 
    &lt;strong&gt;Taxa de Mutação&lt;/strong&gt;: consiste em um parâmetro que controla a probabilidade de ocorrência de mutações nas soluções candidatas durante o processo de evolução. Essa mutação é aplicada de maneira aleatória em alguns descendentes, introduzindo variação genética na população.
    &lt;/li&gt;

    &lt;li&gt; 
    &lt;strong&gt;Nova Geração&lt;/strong&gt;: refere à próxima população de soluções candidatas que será criada após a seleção, reprodução e &lt;u&gt;substituição&lt;/u&gt; das soluções da geração anterior.
    &lt;/li&gt;

&lt;/ul&gt;

&lt;h2 id=&quot;conclusão&quot;&gt;Conclusão&lt;/h2&gt;

&lt;p align=&quot;justify&quot;&gt;
Diante do exposto, percebe-se que a solução de problemas por meio de agentes de inteligência artificial envolve diversos assuntos da ciência da computação e matemática, como buscas (cega, guiada ou complexa) e funções heurísticas. Não obstante, em relação às buscas, há um grande espectro de complexidade de problemas os quais demandam algoritmos específicos para solução, cada um deles apresentando vantagens e desvantagens que devem ser levadas em consideração para tomadas de decisão dentro de um projeto de inteligência artificial.
&lt;/p&gt;
</description>
        <pubDate>Wed, 25 Oct 2023 17:15:00 -0300</pubDate>
        <link>http://localhost:4000/2023/10/25/P2-2023/</link>
        <guid isPermaLink="true">http://localhost:4000/2023/10/25/P2-2023/</guid>
        
        <category>Portifólio 2</category>
        
        
      </item>
    
      <item>
        <title>Agentes e ambientes</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;“É difícil pensar em uma grande indústria que não será transformada pela inteligência artificial. Isso inclui saúde, educação, meios de transporte, verejo, comunicações e agricultura. Existem caminhos surpreendentemente claros para a IA fazer uma grande diferença em todas essas indústrias.” - &lt;strong&gt;Andrew Ng&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p align=&quot;justify&quot;&gt;
No mundo atual é fato que a inteligência artificial vem atuando cada vez mais forte em diferentes áreas de aplicação. Mas como a inteligência artificial interagem com o mundo? Essa e outras questões serão abordadas por esse artigo, cuja finalidade consiste em introduzir o leitor um pouco mais sobre esse universo.
&lt;/p&gt;

&lt;h2 id=&quot;ambiente-de-tarefas-environment&quot;&gt;Ambiente de Tarefas (&lt;i&gt;Environment&lt;/i&gt;)&lt;/h2&gt;

&lt;p align=&quot;justify&quot;&gt;
    Antes de nos aprofundarmos mais sobre como a AI interage com o mundo, é importante ter noção sobre o que seria um ambiente de tarefas (ou ambiente de aplicação). Ao pé da letra, um ambiente pode ser definido como um espaço físico ou contexto em que algo ocorre ou existe. Alguns exemplos de ambiente são:
&lt;/p&gt;

&lt;ul align=&quot;justify&quot;&gt;

    &lt;li&gt;
        &lt;strong&gt;Ambiente Físico&lt;/strong&gt;: refere-se ao espaço ao nosso redor, incluindo os elementos naturais (como terra, água, ar, fauna e flora) e os elementos criados pelo ser humano (como edifícios, cidades e infraestrutura);
    &lt;/li&gt;

    &lt;li&gt;
        &lt;strong&gt;Ambiente Natural&lt;/strong&gt;: refere-se ao mundo natural, abrangendo ecossistemas, climas, paisagens e a interação entre organismos e o meio;
    &lt;/li&gt;

    &lt;li&gt;
        &lt;strong&gt;Ambiente Digital&lt;/strong&gt;: refere-se ao contexto online ou digital em que as interações e atividades ocorrem. Pode incluir a internet, redes sociais, plataformas online e softwares;
    &lt;/li&gt;

    &lt;li&gt;
        &lt;strong&gt;Ambiente de Negócios&lt;/strong&gt;: refere-se ao cenário econômico e comercial em que as empresas operam, incluindo concorrência, regulamentação e fatores econômicos;
    &lt;/li&gt;

    &lt;li&gt;
        &lt;strong&gt;Ambiente Social&lt;/strong&gt;: refere-se ao contexto das relações humanas e interações sociais, abrangendo aspectos culturais, econômicos, políticos e sociológicos;
    &lt;/li&gt;

    &lt;li&gt;
        &lt;strong&gt;Ambiente Virtual&lt;/strong&gt;: refere-se à ambientes criados digitalmente, como ambientes de realidade virtual ou simulações computacionais;
    &lt;/li&gt;

    &lt;li&gt;
        &lt;strong&gt;Ambiente de Aprendizado&lt;/strong&gt;: refere-se ao local e/ou contexto em que a educação e a aprendizagem ocorrem, como escolas, universidades e programas de treinamento.
    &lt;/li&gt;

&lt;/ul&gt;

&lt;p align=&quot;justify&quot;&gt;
    Mas o que seria um ambiente para uma AI? Para uma inteligência artificial, o ambiente refere-se ao espaço no qual ela opera, coletando informações para tomar decisões e finalmente executar ações. Tal conceito é fundamental para o aprendizado de máquina, principalmente quando se usa o paradigma de &lt;i&gt;reinforcement learning&lt;/i&gt; (aprendizado por reforço), pois é o cenário em que a IA realiza suas atividades (operação, aprendizado e tomada de decisões). Na prática, no contexto da inteligência artificial, podemos resumi os diferentes meios existentes em 3 principais:
&lt;/p&gt;

&lt;ul&gt;

    &lt;li&gt;
        &lt;strong&gt;Ambiente Simulado&lt;/strong&gt;: refere-se ambientes de jogos, simulações físicas ou ambientes digitais criados para fins de treinamento.
    &lt;/li&gt;

    &lt;li&gt;
        &lt;strong&gt;Ambiente Físico&lt;/strong&gt;: refere-se à ambientes reais e seus elementos, os quais a inteligência artificial precisa perceber e responder.
    &lt;/li&gt;

    &lt;li&gt;
        &lt;strong&gt;Ambiente de Software&lt;/strong&gt;: refere-se à ambientes puramente de software, como sistemas de recomendação em sites de comércio eletrônico, motores de busca na web ou sistemas de suporte à decisão em ambientes de negócios.
    &lt;/li&gt;

&lt;/ul&gt;

&lt;h2 id=&quot;agentes-de-inteligência-artificial&quot;&gt;Agentes de Inteligência Artificial&lt;/h2&gt;

&lt;p align=&quot;justify&quot;&gt;
    Após o entendimento sobre o que seria um meio, é interessante entender o conceito de &lt;strong&gt;agente&lt;/strong&gt;. Sendo assim, no contexto da inteligência artificial, um &quot;agente&quot; refere-se a uma entidade que é capaz de perceber seu ambiente, tomar decisões com base em sua percepção e executar ações para alcançar metas ou objetivos específicos. A &lt;strong&gt;Imagem 1&lt;/strong&gt; a seguir apresenta uma arquitetura geral de um agente, assim como sua interação com o ambiente.
&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&quot;/img/CanonicAgent.png&quot; align=&quot;center&quot; /&gt;
        &lt;figcaption align=&quot;center&quot;&gt;&lt;strong&gt;Imagem 1&lt;/strong&gt;: estrutura canônica de um agente 
            &lt;br /&gt; 
                Ref.: &lt;a href=&quot;https://www.academia.edu/41601226/Artificial_Intelligence_A_Modern_Approach&quot;&gt;&lt;i&gt; Stuart Russel &amp;amp; Peter Norving - &quot;Artificial Inteligence, a Modern Approach&quot;&lt;/i&gt;&lt;/a&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p align=&quot;justify&quot;&gt;    
    Diante do exposto, é importante ressaltar que os agentes são uma parte fundamental do paradigma de aprendizado de máquina &lt;strong&gt;aprendizado por reforço&lt;/strong&gt; e também são amplamente utilizados em sistemas de inteligência artificial autônomos. Diante disso, os agentes podem ser de diferentes tipos, variando desde agentes simples que executam tarefas específicas até agentes mais complexos e autônomos, como assistentes virtuais, carros autônomos, robôs industriais e muito mais. Confira a seguir alguns dos principais tipos de agentes de inteligência artificial.
&lt;/p&gt;

&lt;ul align=&quot;justify&quot;&gt;

    &lt;li&gt;
        &lt;strong&gt;Agentes de reflexo simples&lt;/strong&gt;: é um tipo básico de agente que toma decisões com base apenas nas informações imediatas e atuais do ambiente (percepção atual), sem considerar o histórico de ações ou as consequências futuras. Ele age como um &quot;reflexo&quot; automático, respondendo diretamente à estímulos do meio. Entretanto, esse agente só funciona para &lt;u&gt;ambientes totalmente observável&lt;/u&gt;. A &lt;strong&gt;Imagem 2&lt;/strong&gt; a seguir apresenta um esquemático sobre como esse agente interage com o meio, assim como sua estrutura.

            &lt;figure&gt;
                &lt;img src=&quot;/img/SimpleReflexAgent.png&quot; align=&quot;center&quot; /&gt;
                    &lt;figcaption align=&quot;center&quot;&gt;&lt;strong&gt;Imagem 2&lt;/strong&gt;: estrutura de um agente de reflexo simples 
                        &lt;br /&gt; 
                        Ref.: &lt;a href=&quot;https://www.academia.edu/41601226/Artificial_Intelligence_A_Modern_Approach&quot;&gt;&lt;i&gt; Stuart Russel &amp;amp; Peter Norving - &quot;Artificial Inteligence, a Modern Approach&quot;&lt;/i&gt;&lt;/a&gt;
                    &lt;/figcaption&gt;
            &lt;/figure&gt;

    &lt;br /&gt;

    &lt;/li&gt;

    &lt;li&gt;
        &lt;strong&gt;Agentes de reflexo baseado em modelo&lt;/strong&gt;: consiste em um tipo de agente que toma decisões com base nas informações atuais do meio, mas também leva em consideração um modelo interno do ambiente (ou estado interno) que mantém um &lt;u&gt;histórico de percepções&lt;/u&gt; o qual permite a previsão das consequências de determinadas ações antes de tomá-las &lt;strong&gt;(Imagem 3)&lt;/strong&gt;. Essa capacidade de planejamento ajuda o agente a tomar decisões mais informadas, antecipando os resultados de suas ações, tornando esse agente mais adequado para tarefas que envolvem um grau de previsão e planejamento. Diante do exposto, para o correto funcionamento do sistema, esse agente também considera outros dois modelos: um &lt;strong&gt;modelo transitório&lt;/strong&gt; o qual descreve como o ambiente muda com a ação do agente e um &lt;strong&gt;modelo sensorial&lt;/strong&gt;, que descreve o funcionamento e limitação dos sensores.

            &lt;figure&gt;
                &lt;img src=&quot;/img/ReflexModelAgent.png&quot; align=&quot;center&quot; /&gt;
                    &lt;figcaption align=&quot;center&quot;&gt;&lt;strong&gt;Imagem 3&lt;/strong&gt;: estrutura de um agentes de reflexo baseado em modelo
                        &lt;br /&gt; 
                        Ref.: &lt;a href=&quot;https://www.academia.edu/41601226/Artificial_Intelligence_A_Modern_Approach&quot;&gt;&lt;i&gt; Stuart Russel &amp;amp; Peter Norving - &quot;Artificial Inteligence, a Modern Approach&quot;&lt;/i&gt;&lt;/a&gt;
                    &lt;/figcaption&gt;
            &lt;/figure&gt;

    &lt;br /&gt;

    &lt;/li&gt;

    &lt;li&gt;
        &lt;strong&gt;Agentes baseados em objetivos&lt;/strong&gt;: refere-se á tipo de agente que toma decisões e executa ações com base em metas ou objetivos específicos que deseja alcançar &lt;strong&gt;(imagem 4)&lt;/strong&gt;. Ele avalia seu ambiente e escolhe ações que o aproximam de seus objetivos. Esse tipo de agente é orientado à metas e frequentemente incorpora um processo de planejamento para determinar a melhor sequência de ações a serem tomadas. É amplamente utilizado em sistemas de IA voltados para tarefas complexas que envolvem a busca ativa por soluções ou a otimização de resultados.

            &lt;figure&gt;
                &lt;img src=&quot;/img/ObjectiveAgent.png&quot; align=&quot;center&quot; /&gt;
                    &lt;figcaption align=&quot;center&quot;&gt;&lt;strong&gt;Imagem 4&lt;/strong&gt;: estrutura de um agente baseados em objetivos
                        &lt;br /&gt; 
                        Ref.: &lt;a href=&quot;https://www.academia.edu/41601226/Artificial_Intelligence_A_Modern_Approach&quot;&gt;&lt;i&gt; Stuart Russel &amp;amp; Peter Norving - &quot;Artificial Inteligence, a Modern Approach&quot;&lt;/i&gt;&lt;/a&gt;
                    &lt;/figcaption&gt;
            &lt;/figure&gt;

    &lt;br /&gt;

    &lt;/li&gt;

    &lt;li&gt;
        &lt;strong&gt;Agentes utilitários&lt;/strong&gt;: é um tipo de agente que toma decisões com base na maximização de uma função de utilidade &lt;strong&gt;(Imagem 5)&lt;/strong&gt;. Essa função atribui valores às diferentes situações, permitindo ao agente escolher a ação que maximiza seu valor esperado. Diante disso, o agente considera não apenas seus objetivos, mas também a preferência por resultados específicos, resolvendo o problema de &lt;u&gt;conflito de objetivos&lt;/u&gt; e melhorando a performance do agente. Essa abordagem é frequentemente usada em tarefas onde não há uma única meta fixa, mas sim uma avaliação contínua das consequências das ações em termos de &quot;utilidade&quot; ou &quot;valor&quot; esperado. 
    
            &lt;figure&gt;
                &lt;img src=&quot;/img/UtilitaryAgent.png&quot; align=&quot;center&quot; /&gt;
                    &lt;figcaption align=&quot;center&quot;&gt;&lt;strong&gt;Imagem 5&lt;/strong&gt;: estrutura de um agente utilitário
                        &lt;br /&gt; 
                        Ref.: &lt;a href=&quot;https://www.academia.edu/41601226/Artificial_Intelligence_A_Modern_Approach&quot;&gt;&lt;i&gt; Stuart Russel &amp;amp; Peter Norving - &quot;Artificial Inteligence, a Modern Approach&quot;&lt;/i&gt;&lt;/a&gt;
                    &lt;/figcaption&gt;
            &lt;/figure&gt;

    &lt;br /&gt;

    &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;conceitos-fundamentais-agentes-de-ai&quot;&gt;Conceitos Fundamentais (Agentes de AI)&lt;/h2&gt;

&lt;p align=&quot;justify&quot;&gt;   
    Após o entendimento sobre os diferentes dipos de agentes de AI (tópico anterior), é importante entender alguns conceitos fundamentais relacionados à forma como eles interagem com o ambiente e toma decisões a fim de atingir seu objetivo específico. Diante disso, 3 conceitos se destacam: &lt;u&gt;Ação&lt;/u&gt;, &lt;u&gt;Função&lt;/u&gt; e &lt;u&gt;Programa&lt;/u&gt;. Confira a seguir uma explicação com mais detalhes sobre cada deles (no contexto de agentes de AI).
&lt;/p&gt;

&lt;ul align=&quot;justify&quot;&gt;

    &lt;li&gt;
        &lt;strong&gt;Ação de um agente&lt;/strong&gt;: refere às escolhas ou decisões tomadas pelo agente para influenciar seu ambiente. Tais ações depende de sua programação interna e de toda a sequência de percepção observada até o momento, mas não de algo que ele não tenha percebido. 
        &lt;br /&gt;
        &lt;strong&gt;Ex.:&lt;/strong&gt; mover-se, coletar informações, ações específicas, etc;
    &lt;/li&gt;

    &lt;li&gt;
        &lt;strong&gt;Função agente&lt;/strong&gt;: refere-se ao componente central do agente de IA que determina o comportamento do agente. Para isso, ela mapeia as percepções do agente (informações que ele obtém de seu ambiente) para as ações que o agente deve realizar;
    &lt;/li&gt;

    &lt;li&gt;
        &lt;strong&gt;Programa agente&lt;/strong&gt;: é a implementação concreta da &lt;u&gt;função agente&lt;/u&gt; em um sistema de inteligência artificial. Ele consiste em um conjunto de instruções (algoritmos) que guiam o comportamento do agente com base em suas percepções e no conhecimento acumulado. Sendo assim, tal programa pode ser escrito em uma linguagem de programação e pode envolver a aplicação de técnicas, a depender do tipo de agente de AI e seu objetivo, de aprendizado de máquina e lógica.
    &lt;/li&gt;

&lt;/ul&gt;

&lt;h2 id=&quot;racionalidade--agente-de-ai&quot;&gt;Racionalidade &amp;amp; Agente de AI&lt;/h2&gt;

&lt;p align=&quot;justify&quot;&gt;
    O termo racionalidade, a pesar de ser tratado de maneira formal pela primeira vez na &lt;strong&gt;Filosofia&lt;/strong&gt;, possui raízes em diversas áreas da ciência, cada uma abordando-a à sua maneira, como economia, psicologia, inteligência artificial, ciência cognitiva e até mesmo nas ciências sociais. É nesse contexto que a &lt;strong&gt;Teoria da Decisão&lt;/strong&gt;, em meados de 1950, ganhou muita visibilidade, tendo como finalidade o estudo das escolhas de uma pessoa, organização e até mesmo agentes inteligentes (agentes de AI).
&lt;/p&gt;

&lt;p align=&quot;justify&quot;&gt;
    Em relação a teoria da decisão, alguns conceitos se fazem muito importantes, como o &lt;strong&gt;Consquencialismo&lt;/strong&gt;, &lt;strong&gt;Performance&lt;/strong&gt;, &lt;strong&gt;Agente Racional&lt;/strong&gt; e &lt;strong&gt; Agente inteligente&lt;/strong&gt;. Confira a seguir uma breve explicação sobre cada um deles.
&lt;/p&gt;

&lt;ul align=&quot;justify&quot;&gt;

    &lt;li&gt;
        &lt;strong&gt;Consequencialismo&lt;/strong&gt;: consiste em uma abordagem ética que avalia a moralidade das ações com base em suas consequências. Em termos de tomada de decisão, consiste na escolha de ações que maximizem suas boas consequências e que reduzam ao máximo suas más consequências (decisão ética ou moralmente correta); 
    &lt;/li&gt;

    &lt;li&gt;
        &lt;strong&gt;Performance&lt;/strong&gt;: consiste em uma métrica ou critério que é usada para avaliar o sucesso ou qualidade das consequências de uma decisão - &quot;os impactos da ação modificaram os estatus do ambiente adequadamente?&quot;. Essa métrica é inserida pelo própio programador, podendo ser explicita ou não. Além disso, nem sempre é fácil formular uma boa medida de performance.
    &lt;/li&gt;

    &lt;li&gt;
        &lt;strong&gt;Agente racional&lt;/strong&gt;: consiste em um agente capaz de selecionar uma ação a qual espera-se que maximize a medida de desempenho (performance) considerando as informações disponíveis, os objetivos desejados e as restrições existentes.
    &lt;/li&gt;

    &lt;li&gt;
        &lt;strong&gt;Agente Inteligente&lt;/strong&gt;: consiste em um agente capaz de perceber seu ambiente, tomar decisões e agir de maneira autônoma para alcançar objetivos específicos ou resolver problemas. Para isso, esse tipo de entidade envolve &lt;strong&gt;aprendizado de máquina&lt;/strong&gt;, &lt;strong&gt;Aquisição de informações&lt;/strong&gt; (geralmente por meio de sensores) e &lt;strong&gt;exploração&lt;/strong&gt;.
    &lt;/li&gt;

    &lt;br /&gt;

    &lt;strong&gt; Obs.&lt;/strong&gt;: a racionalidade não é o mesmo que perfeição, pois ela busca maximizar a performance esperada, enquanto a perfeição consiste na maximização de fato da performance.
&lt;/ul&gt;

&lt;p align=&quot;justify&quot;&gt;
    Diante do exposto, é importante entender os fatores os quais influenciam a decisão sobre o que seria uma ação racional em um determinado momento. Nesse sentido, 4 pontos principais devem ser considerados:
&lt;/p&gt;

&lt;ul align=&quot;justify&quot;&gt;

    &lt;li&gt;
        A medida de desempenho que define o critério de sucesso
    &lt;/li&gt;

    &lt;li&gt;
        O conhecimento prévio do agente sobre o ambiente;
    &lt;/li&gt;

    &lt;li&gt;
        As ações que o agente pode realizar;
    &lt;/li&gt;

    &lt;li&gt;
        A sequência de percepção do agente até o momento da decisão;
    &lt;/li&gt;

&lt;/ul&gt;

&lt;h2 id=&quot;representação-dos-estados&quot;&gt;Representação dos Estados&lt;/h2&gt;

&lt;p align=&quot;justify&quot;&gt;
    Outra informação de suma importância no contexto da inteligência artificial é a representação de seus estados e sua organização (mapeamento). Para isso, de início é importante entender que um estado consiste em uma descrição do ambiente em um determinado momento, isto é, sua situação, condições, configurações e características relevantes. Sendo assim, existem 3 principais representações de estados para AI (&lt;strong&gt;Imagem 6&lt;/strong&gt;). São eles:
&lt;/p&gt;

&lt;ul align=&quot;justify&quot;&gt;

    &lt;li&gt;
        &lt;strong&gt;Representação Atômica (Atomic)&lt;/strong&gt;: nessa representação, o ambiente é dividido em estados atômicos, cada um representando uma característica específica do ambiente. Diante disso, cada estado é independente dos outros e desscreve uma característica &lt;strong&gt;única&lt;/strong&gt; do meio. 
        
        &lt;br /&gt;

        &lt;strong&gt;Ex.:&lt;/strong&gt; pesquisa, jogos, Modelos de Markov ocultos, Processos de decisão de Markov.
    &lt;/li&gt;

    &lt;br /&gt;

    &lt;li&gt;
        &lt;strong&gt;Representação Desagregada (Factored)&lt;/strong&gt;: nessa abordagem, os estados são representados como uma combinação de variáveis independentes ou atributos. Cada variável representa uma característica do ambiente e pode ter seus próprios valores possíveis, permitindo uma descrição mais compacta e estruturada do ambiente
    &lt;/li&gt;

    &lt;li&gt;
        &lt;strong&gt;Representação Estruturada (Structured)&lt;/strong&gt;: nessa abordagem, os estados são descritos em termos de relações e conexões entre diferentes elementos do ambiente. Isso envolve a representação das relações e dependências entre as variáveis do ambiente, tornando-a muito útil para modelar ambientes complexos com relações complexas entre seus elementos.
    &lt;/li&gt;

&lt;/ul&gt;

&lt;figure&gt;
    &lt;img src=&quot;/img/StatesAI.png&quot; align=&quot;center&quot; /&gt;
        &lt;figcaption align=&quot;center&quot;&gt;&lt;strong&gt;Imagem 6&lt;/strong&gt;: principais representações de estados para AI 
            &lt;br /&gt; 
                Ref.: &lt;a href=&quot;https://www.academia.edu/41601226/Artificial_Intelligence_A_Modern_Approach&quot;&gt;&lt;i&gt;Stuart Russel &amp;amp; Peter Norving - &quot;Artificial Inteligence, a Modern Approach&lt;/i&gt;&lt;/a&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h2 id=&quot;especificação-do-meio&quot;&gt;Especificação do Meio&lt;/h2&gt;

&lt;p align=&quot;justify&quot;&gt;
    Após o entendimento das nuâncias envolvendo agentes no campo da inteligência artificial, podemos unir o conceito de &lt;strong&gt;ambiente &lt;/strong&gt; e &lt;strong&gt;agente&lt;/strong&gt;. É nesse sentido que, ao projetar um agente, o primeiro passo deve ser sempre especificar o ambiente de tarefa da forma mais completa possível. Para isso, geralmente utiliza-se uma abordagem para definir e entender os sistemas inteligentes conhecida como &lt;strong&gt;descrição PEAS&lt;/strong&gt;, um acrônimo para &quot;&lt;i&gt;&lt;strong&gt;P&lt;/strong&gt;erformance, &lt;strong&gt;E&lt;/strong&gt;nvironment, &lt;strong&gt;A&lt;/strong&gt;ctuators, &lt;strong&gt;S&lt;/strong&gt;ensors&lt;/i&gt;&quot;. Sendo assim, cada termo desse acrônomo pode ser interpretado, respectivamente, por meio das seguintes perguntas:
&lt;/p&gt;

&lt;ul align=&quot;justify&quot;&gt;

    &lt;li&gt;
        &lt;strong&gt;Performance&lt;/strong&gt;: qual é a &lt;strong&gt;medida de performance&lt;/strong&gt; desejada?
    &lt;/li&gt;
        
    &lt;li&gt;
        &lt;strong&gt;Environment&lt;/strong&gt;: com é o &lt;strong&gt;ambiente&lt;/strong&gt; da tarefa?
    &lt;/li&gt;

    &lt;li&gt;
        &lt;strong&gt;Actuators&lt;/strong&gt;: quais são os &lt;strong&gt;atuadores&lt;/strong&gt; disponíveis para desempenhar ações?
    &lt;/li&gt;

    &lt;li&gt;
        &lt;strong&gt;Sensors&lt;/strong&gt;: quais são os &lt;strong&gt;sensores&lt;/strong&gt; disponíveis para explorar o ambiente
    &lt;/li&gt;

&lt;/ul&gt;

&lt;p align=&quot;justify&quot;&gt;
    Por fim, é importante entender as &lt;strong&gt;propiedades&lt;/strong&gt; do meio. Isso pode ser feito por meio da comparação de termos antagônicos, sendo tais termos características as quais diferentes meios podem vir a assumir. Algumas dessas características são:
&lt;/p&gt;

&lt;ul align=&quot;justify&quot;&gt;
    
    &lt;li&gt;
        &lt;u&gt;Conhecido&lt;/u&gt; vs. &lt;u&gt;Desconhecido&lt;/u&gt;;
    &lt;/li&gt;
        
    &lt;li&gt;
        &lt;u&gt;Discreto&lt;/u&gt; vs. &lt;u&gt;Contínuo&lt;/u&gt;;
    &lt;/li&gt;

    &lt;li&gt;
        &lt;u&gt;Estático&lt;/u&gt; vs. &lt;u&gt;Dinâmico&lt;/u&gt;;
    &lt;/li&gt;

    &lt;li&gt;
        &lt;u&gt;Determinístico&lt;/u&gt; vs. &lt;u&gt;Não determinístico&lt;/u&gt;;
    &lt;/li&gt;

    &lt;li&gt;
        &lt;u&gt;Episódico&lt;/u&gt; vs. &lt;u&gt;Sequencial&lt;/u&gt;;
    &lt;/li&gt;

    &lt;li&gt;
        &lt;u&gt;Agente único&lt;/u&gt; vs. &lt;u&gt;Multiagente&lt;/u&gt;;
    &lt;/li&gt;

    &lt;li&gt;
        &lt;u&gt;Totalmente observáve&lt;/u&gt;l vs. &lt;u&gt;Parcialmente observável&lt;/u&gt; vs. &lt;u&gt;Não observável&lt;/u&gt;.
    &lt;/li&gt;
    
&lt;/ul&gt;

&lt;h2 id=&quot;conclusão&quot;&gt;Conclusão&lt;/h2&gt;

&lt;p align=&quot;justify&quot;&gt; 
   De acordo com este artigo, espera-se que o leitor compreenda um pouco mais sobre o que seria um agente e um ambiente de tarefas no contexto da inteligência artificial. Para isso, foram apresentados conceitos, termos e terioas fundamentais para essa área de estudo cuja relevância aumenta cada vez mais na sociedade contemporânea.
&lt;/p&gt;

&lt;hr /&gt;
</description>
        <pubDate>Thu, 10 Aug 2023 10:55:00 -0300</pubDate>
        <link>http://localhost:4000/2023/08/10/P1-2023/</link>
        <guid isPermaLink="true">http://localhost:4000/2023/08/10/P1-2023/</guid>
        
        <category>Portifólio 1</category>
        
        
      </item>
    
      <item>
        <title>O Estado da Arte da Inteligência Artificial</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;“A sociedade está agora em um momento crucial onde deve determinar como implantar tecnologias baseadas em IA de maneiras que promovam, ao invés de dificultarem, valores democráticos como liberdade, igualdade e transparência” - &lt;strong&gt;Stanford University, AI100&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p align=&quot;justify&quot;&gt;
    Antes de entrarmos mais afundo sobre o ápice da inteligência artificial contemporânea, é importante entender sobre onde buscar tais informações. Diante disso, o presente artigo foi baseado no importante projeto de pesquisa denominado &lt;strong&gt;&lt;i&gt;Stanford University’s One Hundred Year Study on AI&lt;/i&gt;&lt;/strong&gt; (&lt;a href=&quot;https://ai100.stanford.edu/&quot;&gt;AI100&lt;/a&gt;) e nos famosos relatórios do (&lt;a href=&quot;https://aiindex.stanford.edu/&quot;&gt;&lt;strong&gt;&lt;i&gt;AI Index&lt;/i&gt;&lt;/strong&gt;&lt;/a&gt;), principalmente por fornecerem, periodicamente, dados imparciais, rigorosamente avaliados e de origem global. Sendo assim, também é interessante ressaltar que o projeto AI100 se baseia nos relatórios fornecidos pela AI Index, sendo esses dois meios de estudo fornecidos pela &lt;a href=&quot;https://www.stanford.edu/&quot;&gt;&lt;strong&gt;&lt;i&gt;Stanford University&lt;/i&gt;&lt;/strong&gt;&lt;/a&gt; (Califórnia - EUA).
&lt;/p&gt;

&lt;h2 id=&quot;os-efeitos-da-inteligência-artificial-na-sociedade&quot;&gt;Os efeitos da inteligência artificial na sociedade&lt;/h2&gt;

&lt;p align=&quot;justify&quot;&gt;
    De início, é importante analisar os impactos da inteligência artificial na sociedade. Para tanto, confira a seguir algumas conclusões sobre as informações fornecidas pelos relatórios da AI Index (2018 e 2019) em alguns contextos específicos.
&lt;/p&gt;

&lt;ul align=&quot;justify&quot;&gt;
    &lt;li&gt;
        &lt;strong&gt;Educação&lt;/strong&gt;: o interesse sobre à area de Inteligência Artificial aumentou significativamente no mundo todo. Um bom indicador é o aumento da matrícula em disciplinas de IA em cerca de 5 vezes somente nas universidades dos EUA e 16 vezes no restante do mundo. 
    &lt;/li&gt;

    &lt;li&gt;
        &lt;strong&gt;Publicações&lt;/strong&gt;: o número de publicações envolvendo AI aumentou em 20 vezes no período de 2010 à 2019, principalmente envolvendo aprendizado de máquina, visão computacional e processamento de linguagem natural. Além disso, é interessante resaltar que o principal problema abordado é a ética envolvendo sistemas de AI, principalmente no que tange à privacidade de dados e viés de algoritmo. A pesquisadora doutora &lt;strong&gt;Joy Buolamwini&lt;/strong&gt;, uma das principais pesquisadoras sobre ética envolvendo AI, apresenta ao mundo criticas construtivas sobre os perigos de se utilizar dados enviesados no treinamento de sistemas inteligentes em &lt;a href=&quot;https://dspace.mit.edu/handle/1721.1/114068&quot;&gt;uma de suas teses&lt;/a&gt;.
    &lt;/li&gt;

    &lt;li&gt;
        &lt;strong&gt;Mercado&lt;/strong&gt;: o mercado de IA está cada vez mais aquecido. Um forte indicado para isso é o aumento de cerca de 20 vezes o número de startups de AI somente nos EUA. Somado a isso, Cingapura, Brasil, Austrália, Canadá e Índia são os países com maior crescimento em termos de número de contratações na área de IA.
    &lt;/li&gt; 

    &lt;li&gt;
        &lt;strong&gt;Desempenho&lt;/strong&gt;: é fato que hoje os sitemas de inteligência artificial estão cada vez mais eficiêntes. A queda de 28% na taxa de erro em detecção de objetos em sistemas desenvolvidos no período de 2010 à 2017, o aumento na acurácia de 55% para 68% em sistemas de resposta à perguntas com base em informações visuais (VOA - &lt;i&gt;Vision Question Answering&lt;/i&gt;), o aumento em 100 vezes na velocidade de treinamento de sistemas de reconhecimento de imagens em apenas dois anos e o aumento, em cerca de duas vezes, do poder computacional nos principais aplicativos de AI a cada 3,4 meses, são fortes indicadores para tal aumento de desempenho dos sistemas inteligêntes.
    &lt;/li&gt;  
&lt;/ul&gt;

&lt;p align=&quot;justify&quot;&gt;
    Diante das informações apresentadas acima (extraidas do AI100 e AI Index), torna-se claro que as tecnologias de AI impactam profundamente a sociedade humana, muitas vezes superando o ser humano em determinadas atividades, gerando duvidas sobre a substituição de pessoas em determinadas áreas de atuação, o que pode causar diversos problemas e benefícios os quais devem ser estudados e ponderados para tomadas de decisões políticas. 
&lt;/p&gt;

&lt;h2 id=&quot;algumas-tecnologias-de-ia&quot;&gt;Algumas tecnologias de IA&lt;/h2&gt;

&lt;p align=&quot;justify&quot;&gt;
    Não é segredo que, nos dias atuais, os sistemas computacionais vêm crescendo, em termos de aplicabilidade, cada vez mais. A seguir, confira uma lista contendo os principais sitemas de inteligência artificial que se tem notícia atualmente, os quais muitos deles são considerados o &lt;strong&gt;estado da arte&lt;/strong&gt; da inteligência artificial, isto é, o ápice da tecnologia de AI.
&lt;/p&gt;

&lt;ul align=&quot;justify&quot;&gt;
    &lt;li&gt;
        &lt;strong&gt;Veículos Autônomos&lt;/strong&gt;: carros da empresa TESLA considerados autônomos de nível 2 (automação parcial), capazes de controlar a direção e frenagem ao mesmo tempo. Segundo a &lt;strong&gt;Administração Nacional de Segurança no Trânsito nas Rodovias&lt;/strong&gt; (NHTSA - EUA), existem &lt;a href=&quot;https://proximonivel.embratel.com.br/voce-conhece-os-6-niveis-de-um-carro-autonomo/&quot;&gt;6 níveis de automação de veículos&lt;/a&gt;;
    &lt;/li&gt;

    &lt;li&gt;
        &lt;strong&gt;Robôs Avançados&lt;/strong&gt;: robôs autônomos (Ex.: BigDog, Atlas , etc) criados pela empresa estado-unidense de engenharia robótica &lt;strong&gt;&lt;i&gt;Boston Dynamics&lt;/i&gt;&lt;/strong&gt; (Imagem 1). &lt;a href=&quot;https://bostondynamics.com/products/&quot;&gt;Tais robôs&lt;/a&gt; ficaram famosos por possuirem comportamentos notáveis como: mobilidade, agilidade, destreza e velocidade;
    &lt;/li&gt;

    &lt;li&gt;
        &lt;strong&gt;Agente Remoto da NASA&lt;/strong&gt;: permite o planejamento, controle e monitoramento e navegação autônoma de aeronaves e robôs; (Ex.: &lt;a href=&quot;https://mars.nasa.gov/mars2020/&quot;&gt; Perseverance Rover&lt;/a&gt;)
    &lt;/li&gt;

    &lt;li&gt;
        &lt;strong&gt;Dynamic Analysis and Replanning Tool (DART)&lt;/strong&gt;: programa de inteligência artificial usado pelos militares dos EUA para otimizar e agendar o transporte de suprimentos ou pessoal e resolver outros problemas logísticos.
    &lt;/li&gt;

&lt;/ul&gt;

&lt;p align=&quot;justify&quot;&gt;
    Diversas outras incríveis tecnologias de AI se fazem presente nos dias atuais e muitas delas  consistem em evoluções de sistemas especialistas, superando até mesmo humanos especialistas na área. Não satisfeito, até o campo das artes foram dominadas por inteligência artificial, principalmente por tecnologias de ponta como &lt;a href=&quot;https://openai.com/&quot;&gt;Open AI&lt;/a&gt;, &lt;a href=&quot;https://openai.com/research/gpt-4&quot;&gt;GPT-4&lt;/a&gt;, &lt;a href=&quot;https://www.bing.com/search?q=Bing%20AI&amp;amp;showconv=1&amp;amp;form=MW00X7&quot;&gt;Bing AI&lt;/a&gt;, &lt;a href=&quot;https://www.canva.com/pt_br/gerador-imagem-ia/&quot;&gt;Canvas AI image generator&lt;/a&gt;, etc. Além disso, algumas dessas tecnologias, como o GPT-4, tornaram-se forte aliadas para diversos profissionais e estudantes ao redor do mundo, aumentando a produtividade em suas atividades.
&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&quot;/img/Boston_Dynamics_robots.jpg&quot; width=&quot;624&quot; height=&quot;532&quot; align=&quot;center&quot; /&gt;
    &lt;figcaption align=&quot;center&quot;&gt;&lt;strong&gt;Imagem 1&lt;/strong&gt;: robôs avançados criados pela &lt;a href=&quot;https://bostondynamics.com/&quot;&gt;&lt;i&gt;Boston Dynamics&lt;/i&gt;&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h2 id=&quot;riscos-vs-benefícios&quot;&gt;Riscos Vs Benefícios&lt;/h2&gt;

&lt;p align=&quot;justify&quot;&gt;
    Ao analisar um contexto de aplicação da inteligência artificial, é necessário ponderar os prós e contras. Diante disso, a tabela a baixo apresenta um comparativo entre os benefícios e os riscos de algumas das principais demandas de aplicação atualmente.
&lt;/p&gt;

&lt;!-- Tabela gerada por meio do site https://www.tablesgenerator.com/html_tables --&gt;
&lt;style type=&quot;text/css&quot;&gt;
.tg  {border-collapse:collapse;border-spacing:0;}
.tg td{border-color:black;border-style:solid;border-width:1px;font-family:sans-serif, sans-serif;font-size:14px;
  overflow:hidden;padding:10px 5px;word-break:normal;}
.tg th{border-color:black;border-style:solid;border-width:1px;font-family:sans-serif, sans-serif;font-size:14px;
  font-weight:normal;overflow:hidden;padding:10px 5px;word-break:normal;}
.tg .tg-9wq8{border-color:inherit;text-align:center;vertical-align:middle}
.tg .tg-e7kw{background-color:#ecf4ff;border-color:inherit;font-weight:bold;text-align:center;vertical-align:middle}
.tg .tg-uzvj{border-color:inherit;font-weight:bold;text-align:center;vertical-align:middle}
&lt;/style&gt;

&lt;table class=&quot;tg&quot;&gt;
&lt;thead&gt;
  &lt;tr&gt;
    &lt;th class=&quot;tg-e7kw&quot; colspan=&quot;3&quot;&gt;Riscos e benefícios da IA&lt;/th&gt;
  &lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-uzvj&quot;&gt;Contexto&lt;/td&gt;
    &lt;td class=&quot;tg-uzvj&quot;&gt;Benefício&lt;/td&gt;
    &lt;td class=&quot;tg-uzvj&quot;&gt;Risco&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-9wq8&quot;&gt;Tomadas &lt;br /&gt;de &lt;br /&gt;decisão&lt;/td&gt;
    &lt;td class=&quot;tg-9wq8&quot;&gt;Pode agilizar e otimizar serviços, &lt;br /&gt;aumentar o ganho de empresas,&lt;br /&gt; minimizar riscos, etc;&lt;/td&gt;
    &lt;td class=&quot;tg-9wq8&quot;&gt;Uso descuidado ou deliberado de regras de tomada de decisão &lt;br /&gt;podem enviesar os resultados,&lt;br /&gt; desfavorecendo sexo, raça, preferências, etc.&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-9wq8&quot;&gt;Aplicações críticas &lt;br /&gt;de &lt;br /&gt;segurança&lt;/td&gt;
    &lt;td class=&quot;tg-9wq8&quot;&gt;Pode otimizar e reduzir riscos em&lt;br /&gt; transportes de cargas e pessoas,&lt;br /&gt; distribuição de água, energia elétrica, etc.&lt;/td&gt;
    &lt;td class=&quot;tg-9wq8&quot;&gt;Questões éticas devem ser levadas em conta,&lt;br /&gt;podendo encarecer os projetos;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-9wq8&quot;&gt;Cybersegurança&lt;/td&gt;
    &lt;td class=&quot;tg-9wq8&quot;&gt;Identificar e prevenir ataques &lt;br /&gt;como proliferação de &lt;span style=&quot;font-weight:bold;font-style:italic&quot;&gt;vírus&lt;/span&gt; e &lt;span style=&quot;font-weight:bold;font-style:italic&quot;&gt;malware&lt;/span&gt;,&lt;br /&gt; &lt;span style=&quot;font-weight:bold;font-style:italic&quot;&gt;blackmail&lt;/span&gt;, &lt;span style=&quot;font-weight:bold;font-style:italic&quot;&gt;phishing&lt;/span&gt;, &lt;span style=&quot;font-weight:bold;font-style:italic&quot;&gt;fake News&lt;/span&gt;, etc.&lt;/td&gt;
    &lt;td class=&quot;tg-9wq8&quot;&gt;Se utilizado de forma errada, &lt;br /&gt;poderá limitar a &lt;span style=&quot;font-weight:bold&quot;&gt;liberdade de expressão;&lt;/span&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-9wq8&quot;&gt;&lt;span style=&quot;font-style:normal&quot;&gt;tarefas cognitivas e intelectuais &lt;/span&gt;&lt;br /&gt;(human-level AI)&lt;/td&gt;
    &lt;td class=&quot;tg-9wq8&quot;&gt;Pode acelerar as descobertas científicas &lt;br /&gt;e solucionar problemas de difícil solução;&lt;/td&gt;
    &lt;td class=&quot;tg-9wq8&quot;&gt;Cientistas famosos de IA alertam que essa pode ser uma má ideia: &lt;br /&gt;&lt;span style=&quot;font-weight:bold;font-style:italic&quot;&gt;Yudkowsky&lt;/span&gt; (2008), &lt;br /&gt;&lt;span style=&quot;font-weight:bold;font-style:italic&quot;&gt;Turing&lt;/span&gt; (1951), &lt;br /&gt;&lt;span style=&quot;font-weight:bold&quot;&gt;Butler&lt;/span&gt; (1863), &lt;br /&gt;&lt;span style=&quot;font-weight:bold;font-style:italic&quot;&gt;Bostrom&lt;/span&gt; (2014),&lt;br /&gt; e personalidades como: &lt;br /&gt;&lt;span style=&quot;font-weight:bold;font-style:italic&quot;&gt;Stephen Hawking&lt;/span&gt;,&lt;br /&gt; &lt;span style=&quot;font-weight:bold;font-style:italic&quot;&gt;Bill Gates&lt;/span&gt;,&lt;br /&gt; &lt;span style=&quot;font-weight:bold;font-style:italic&quot;&gt;Martin Rees&lt;/span&gt;, &lt;br /&gt;&lt;span style=&quot;font-weight:bold;font-style:italic&quot;&gt;Elon Musk&lt;/span&gt;.&lt;br /&gt;&lt;/td&gt;
  &lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;conclusão&quot;&gt;Conclusão&lt;/h2&gt;

&lt;p align=&quot;justify&quot;&gt;
    Diante do exposto, é notavel a grande evolução que a inteligência artificial teve desde sua criação como área de pesquisa até as diversas aplicações nos dias atuais. Contudo, apesar do rápido crescimento dessa indústria, novas questões como ética, viés e proteção mostram-se cada vez mais importantes, atraindo atenção do mundo todo.
&lt;/p&gt;
&lt;hr /&gt;
</description>
        <pubDate>Wed, 09 Aug 2023 20:00:00 -0300</pubDate>
        <link>http://localhost:4000/2023/08/09/P1-2023/</link>
        <guid isPermaLink="true">http://localhost:4000/2023/08/09/P1-2023/</guid>
        
        <category>Portifólio 1</category>
        
        
      </item>
    
      <item>
        <title>A história da AI</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;“O homem, ao mesmo tempo que sonha com todas as suas forças em inventar uma máquina mais forte do que ele mesmo, não pode admitir a possibilidadede não ser o mestre de suas criaturas. Tanto quanto Deus. Poderia Deus ter sonhado em criar o homem superior ao criador e em enfrentá-lo num combate decisivo? É o que, contudo, fazemos com nossas criaturas cibernéticas, às quais oferecemos a oportunidade de nos derrotar.” - &lt;strong&gt;Baudrillard 1997, p. 134&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p align=&quot;justify&quot;&gt;
    No dia 11 de maio de 1997, o maior jogador de xadrez da época e um entre os melhores da história, Garry Kasparov, perdeu uma série de 5 partidas para um computador especializado em xadrez denominado Deep Blue, uma inteligência artificial desenvolvida pela grandiosa IBM. Tal evento histórico atraiu muita atenção da mídia, principalmente pelo fato de, no ultimo jogo, Kasparov perder em apenas 19 lançes (algo muito dificil até mesmo entre os melhores enxadristas da época). Sendo assim, além de ser a primeira vez na história em que um computador venceu campeão mundial em uma partida de vários jogos, esse fato serviu como o início de uma nova era: a era da inteligência artificial.
&lt;/p&gt;

&lt;h2 id=&quot;a-influência-da-mitologia-e-ficção-para-a-ai&quot;&gt;A influência da Mitologia e Ficção para a AI&lt;/h2&gt;

&lt;p align=&quot;justify&quot;&gt;
    Antes do surgimento da primeira inteligência artificial, a mitologia e a ficção científica teve um forte papel na difusão de ideias sobre sistemas inteligêntes capazes de imitar o ser humano. Em 400 A.C., de acordo com a mitologia grega, existia um ser construído em bronze que protegia a &lt;strong&gt;Ilha de Creta&lt;/strong&gt;, atualmente localizada na Gŕecia. Já em 1818, a escritora britânica &lt;strong&gt;Mary Shelley&lt;/strong&gt; publica sua obra &lt;strong&gt;&lt;i&gt;Frankenstein or The Modern Prometheus&lt;/i&gt;&lt;/strong&gt;, onde o cientista &lt;strong&gt;Victor Frankenstein&lt;/strong&gt; cria um ser inteligente a partir de partes de seres humanos mortos. Mas foi somente em 1863 que &lt;strong&gt;Samuel Butler&lt;/strong&gt;, por meio de seu artigo &lt;strong&gt;&lt;i&gt;Darwin among the Machines&lt;/i&gt;&lt;/strong&gt;, publicada no jornal The Press, sugeriu pela primeira vez que as máquinas, por evoluirem muito mais rápido e de maneira constante, superariam o ser humano com base na teoria da seleção natural darwiniana, podendo eventualmente torna-se a forma de vida dominante na terra.
&lt;/p&gt;

&lt;p align=&quot;justify&quot;&gt;
    Seguindo a cronológia dos fatos, em 1927, foi publicado a obra &lt;strong&gt;Metrópolis&lt;/strong&gt;, um filme de drama/ficção científica cuja trama girava em torno de Maria, uma líder entre os trabalhadores, e um robô inteligente feito com uma aparência identica à ela, com a finalidade de desacreditá-la em meio aos trabalhadores. Em 1983, o filme &lt;strong&gt;War Games&lt;/strong&gt; levantou algumas discussões interessantes: a inteligência artificial pode tomar decisões críticas como iniciar uma guerra? Como diferenciar a realidade do mundo virtual? Por tanto, tais eventos históricos citados foram de suma importância para o amadurecimento da inteligência artificial como ideia, para que em um futuro próximo viesse a ser realidade.
&lt;/p&gt;

&lt;h2 id=&quot;o-início-da-inteligência-artificial-1943-1956&quot;&gt;O início da Inteligência Artificial (1943-1956)&lt;/h2&gt;

&lt;p align=&quot;justify&quot;&gt;
    Em meados de 1943, a obra &lt;strong&gt;&lt;i&gt;A Logical Calculus of Ideas Immanent in Nervous Activity&lt;/i&gt;&lt;/strong&gt; (Warren McCulloch e Walter Pitts) propôs ao mundo um modelo de neurônio artificial que representava um neurôneo como uma unidade lógica que recebe entradas binárias e produz uma saída, também binária, com base em regras lógicas (AND, OR, NOT, etc.), que ficou conhecido como &lt;strong&gt;neurônio de McCulloch-Pitts&lt;/strong&gt;. Tal contribuição foi de suma importância para o desenvolvimento das primeiras redes neurais artificiais, onde o estado de um determinado neurôneo artificial varia conforme o estimulo de um número suficiente de outros neurôneos vizinhos (sinápse), evidenciando a possibilidade da humanidade em desenvolver sistemas computacionais que imitam aspectos da atividade cerebral.
&lt;/p&gt;

&lt;p align=&quot;justify&quot;&gt;
    Já em 1949, o psicólogo &lt;strong&gt;Donald Olding Hebb&lt;/strong&gt; desenvolveu uma ideia, mais tarde conhecida como &lt;strong&gt;Aprendizagem Hebbiana&lt;/strong&gt;, que explica como o cérebro pode aprender e formar memórias associativas com base na coocorrência de atividade entre neurônios. Para isso, tal ideia explica como os neurônios podem fortalecer suas conexões quando ativados simultaneamente. Segundo Hebb, quando um neurônio A é ativado e, em seguida, outro neurônio B é ativado imediatamente após, as sinapses (conexões) entre esses dois neurônios são fortalecidas. Isso ocorre porque a ativação simultânea sugere que a conexão entre eles é importante para a transmissão de informações. Por fim, tal ideia foi de suma importância para o desenvolvimento do que mais tarde ficou conhecido como &lt;strong&gt;Redes Neurais Artificiais&lt;/strong&gt;
&lt;/p&gt;

&lt;p align=&quot;justify&quot;&gt;
    Seguindo a ordem cronológica da evolução da AI, em meados dos anos 50, &lt;strong&gt;Alan Turing&lt;/strong&gt;, conhecido como o pai da computação, apresentou ao mundo conceitos como &lt;strong&gt;Teste de Turing&lt;/strong&gt;, &lt;strong&gt;&lt;i&gt;Machine Learning&lt;/i&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;i&gt;Genetic Algorithms&lt;/i&gt;&lt;/strong&gt; e &lt;strong&gt;&lt;i&gt;Reinforcement Learning&lt;/i&gt;&lt;/strong&gt;, além de defender a ideia de que seria mais fácil criar uma AI de nível humano desenvolvendo algoritmos de aprendizado para ensinar uma máquina ao invés de programar sua inteligência manualmente. Já em 1952, dois estudantes da famosa &lt;i&gt;Harvard University&lt;/i&gt; criaram o sistema &lt;strong&gt;SNARC&lt;/strong&gt; (&lt;i&gt;Stochastic Neural Analog Reinforcement Calculator&lt;/i&gt;), que marcou a história como o primeiro computador de rede neural artificial. 
&lt;/p&gt;

&lt;p align=&quot;justify&quot;&gt;
    Por fim, em 1956, ocorreu um marco histórico na inteligência artificial: um workshop de verão denominado &lt;strong&gt;DSRPAI&lt;/strong&gt; (&lt;i&gt;Dartmouth Summer Research Project on Artificial Intelligence&lt;/i&gt;), organizado pelos proeminentes pesquisadores John McCarthy, Marvin Minsky, Nathaniel Rochester e Claude Shannon, o qual ocorreu na &quot;Universidade de Dartmouth&quot; (EUA). Esse evento foi considerado o primeiro cuja pauta principal era à AI e reuniu os principais pesquisadores de várias áreas do conhecimento para uma discussão aberta sobre inteligência artificial. A &lt;strong&gt;Imagem 1&lt;/strong&gt; a seguir apresenta alguns dos principais membros presentes na DSPAI.
&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&quot;/img/DSRPAI_members.png&quot; width=&quot;624&quot; height=&quot;532&quot; align=&quot;center&quot; /&gt;
    &lt;figcaption align=&quot;center&quot;&gt;&lt;strong&gt;Imagem 1&lt;/strong&gt;: os pais fundadores da AI &lt;a href=&quot;https://indiaai.gov.in/article/exploring-the-significance-of-the-dartmouth-workshop&quot;&gt;(DSRPAI)&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h2 id=&quot;o-entusiasmo-inicial-grandes-expectativas-1952-1969&quot;&gt;O entusiasmo inicial: grandes expectativas (1952-1969)&lt;/h2&gt;

&lt;p align=&quot;justify&quot;&gt;
    O período de 1952 à 1969 foi marcado por grandes feitos utilizando sistemas inteligentes, os quais geraram grandes expectativas. Alguns deles foram:
&lt;/p&gt;

&lt;ul align=&quot;justify&quot;&gt;
    &lt;li&gt;
        &lt;strong&gt;Arthur Samuel (1956)&lt;/strong&gt;: ensinou um computador a jogar damas em um nível amador forte;
    &lt;/li&gt;
    &lt;li&gt;
        &lt;strong&gt;Herbert Gelernter (1959)&lt;/strong&gt;: contrução do &quot;Provador do Teorema da Geometria&quot; - sistema capaz de provar teoremas considerados complexos por alguns estudantes de Geometria;
    &lt;/li&gt;
    &lt;li&gt;
        &lt;strong&gt;Frank Rosenblatt (1962)&lt;/strong&gt;: desenvolvimento do &quot;perceptron&quot; - usado em redes neuaris;
    &lt;/li&gt;
    &lt;li&gt;
        &lt;strong&gt;Bert Raphael (1969)&lt;/strong&gt;:  blocks world (problemas de micro-mundo) - usado como caso de teste em pesquisas sobre sistemas de IA e lógica.
    &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;uma-dose-de-realidade-1966-1973&quot;&gt;Uma dose de realidade (1966-1973)&lt;/h2&gt;

&lt;p align=&quot;justify&quot;&gt;
    Apesar dos avanços mencionados no tópico anterior, alguns problemas vieram a tona. Durante o período de 1966 à 1973, análises foram feitas sobre os problemas resolvidos por meio de IA até então, o que levou a conclusão que tais problemas eram, de maneira geral, pouco complexos. Somado a isso, especificamente em 1969, Marvin Minsky e Seymour Papert, por meio do livro &lt;strong&gt;&lt;i&gt;Perceptrons: An Introduction to Computational Geometry&lt;/i&gt;&lt;/strong&gt;, demonstraram que os perceptrons simples, em sua forma mais básica de um único neurônio de camada única, eram limitados em termos de sua capacidade de representação mesmo que pudessem aprender sobre qualquer coisa as quais fossem capazes de representar. Por fim, a complexidade do &lt;strong&gt;problema da porta XOR&lt;/strong&gt; (ou problema da disjunção exclusiva) desempenhou um papel significativo no que ficou conhecido como o &lt;strong&gt;inverno da AI&lt;/strong&gt; (&lt;i&gt;AI winter&lt;/i&gt;).
&lt;/p&gt;

&lt;p align=&quot;justify&quot;&gt;
    Diante do exposto, o inverno da AI refere a uma época de desaceleração na pesquisa e desenvolvimento em 
    inteligência artificial, que ocorreu principalmente durante as décadas de 1970 e 1980, onde muitas empresas faliram por não conseguir cumprir promessas extravagantes, como construir e manter &lt;strong&gt;sistemas especialistas&lt;/strong&gt; para dominios complexos (esse assunto será abordado com mais detalhes mais à frente). Não obstante, alguns dos principais fatores para esse cenario baseiam-se nos métodos de raciocínio usados pelos sistemas da época, os quais falharam em face da incerteza, além da necessidade de avanços para permitir que os sistemas inteligentes pudessem aprender com a experiência. 
&lt;/p&gt;

&lt;p align=&quot;justify&quot;&gt;
    Somado a isso, para entender o problema da porta XOR, é necessario entender que essa porta produz uma saída verdadeira apenas quando exatamente
    uma de suas entradas é verdadeira. Isso faz com que essa porta não seja linearmente separável, fazendo com que o 
    perceptron não consiga resolvê-lo, levando o mundo à uma desilusão em relação à inteligência artificial e desacelerando
    as pesquisas sobre aprendizado de máquina e redes neurais.
&lt;/p&gt;

&lt;h2 id=&quot;sistemas-especialistas1969-1986&quot;&gt;Sistemas Especialistas(1969-1986)&lt;/h2&gt;

&lt;p align=&quot;justify&quot;&gt;
    As décadas de 70 e 80 ficaram marcadas por pesquisas sobre inteligência artificial. Nesse período, estudava-se muito sobre o propósito geral da inteligência artificial, assim como o surgimento do que ficou conhecido como métodos fracos (AI fraca), isto é, sistemas de AI projetados para realizarem tarefas apenas dentro de um domínio específico, o que desencadeou em sistemas que não lidavam bem com contextos fora de sua área de atuação. Tal fato cuminou no desenvolvimento do que ficou conhecido como &lt;strong&gt;Sistemas Especialistas&lt;/strong&gt;, que consistem em programas de AI capazes de imitar a expertise de um especialista humano em um campo particular do conhecimento, como medicina, engenharia, etc. Tais sistemas tinham como objetivo resolver problemas e responder perguntas dentro do seu domínio de atuação. Alguns exemplos de sistemas especialistas desse período foram: 
&lt;/p&gt;

&lt;ul align=&quot;justify&quot;&gt;
    &lt;li&gt;
        &lt;strong&gt;DENDRAL (1969)&lt;/strong&gt;: sistema para inferir a estrutura molecular a partir de informações fornecidas por um espectrômetro de massa;
    &lt;/li&gt;
    &lt;li&gt;
        &lt;strong&gt;MYCIN (1970)&lt;/strong&gt;: sistema para diagnosticar infecções no sangue (baseado em 450 regras). Esse sistema ficou famoso pelo seu alto desempenho em relação à médicos da época.
    &lt;/li&gt;
    &lt;li&gt;
        &lt;strong&gt;R1 (1982)&lt;/strong&gt;: sistema de gerenciamento automatizado de empresa desenvolvido pela &lt;i&gt;Digital Equipment Corporation&lt;/i&gt;. Foi considerado o primeiro sistema especialista comercial bem-sucedido e, em 1986, estava economizando cerca de U$ 40 milhões por ano para a empresa.
    &lt;/li&gt;
&lt;/ul&gt;

&lt;p align=&quot;justify&quot;&gt;
    Diante do sucesso dos sistemas especialistas, centenas de empresas ao redor do mundo começaram a desenvolver novos sistemas especialistas, sistemas de visão, robôs, software e hardware especializado para esses fins. Isso fez com que a indústria de AI valorizasse de alguns milhões de dólares em 1980 para bilhões de dólares em 1988, fato este de suma importância para o desenvolvimento dessa indústria emergente. 
&lt;/p&gt;

&lt;h2 id=&quot;o-retorno-das-redes-neurais-1986-em-diante&quot;&gt;O retorno das Redes Neurais (1986 em diante)&lt;/h2&gt;

&lt;!-- fiz 10 faltam 30 (1/4) Qual é a política de acesso ao meio em uma rede sem fio? Pesquisar em casa --&gt;
&lt;p align=&quot;justify&quot;&gt;
    Em meados da década de 80, houve uma evolução significativa sobre os algoritmos de &lt;strong&gt;aprendizado por retropropagação&lt;/strong&gt; (desenvolvidos pela primeira vez em 1960). Também conhecido como &lt;strong&gt;&lt;i&gt;backpropagation&lt;/i&gt;&lt;/strong&gt;, esse modelo realiza uma passagem para trás para ajustar os parâmetros de um modelo de rede neural até que se ache o valor de peso ideal. Somado a isso, a industria da AI percebeu que os modelos conexionistas representavam melhor a realidade que os demais modelos disponíveis na época, principalmente devido à sua capacidade de aprender por meio de exemplos (dados). Isso tornava os sistemas baseados nesse modelo mais adaptáveis, podendo então ter melhores desempenho em relação à novos dados de treinamento.
&lt;/p&gt;

&lt;p align=&quot;justify&quot;&gt;
    Continuando, mais especificamente em 1998, David McAllester critica o isolacionismo que ocorreu no campo da inteligência artificial em seus estágios iniciais, argumentando que muitos pesquisadores  estavam focados em abordagens baseadas em símbolos (web semântica, frames, etc.) e acreditavam que essas abordagens tornariam obsoleta a teoria clássica de computação. Sendo assim, alegando que uma abordagem interdisciplinar e aberta era necessária para o progresso efetivo no campo da IA, David defendeu que a AI deveria ser integrada à outras disciplinas da ciência da computação, em especial o &lt;strong&gt;raciocínio probabilístico&lt;/strong&gt; e &lt;strong&gt;aprendizado de máquina&lt;/strong&gt;.
&lt;/p&gt;

&lt;h2 id=&quot;big-data--machine-learning-2001-em-diante&quot;&gt;Big Data &amp;amp; Machine Learning (2001 em diante)&lt;/h2&gt;

&lt;p align=&quot;justify&quot;&gt;
    Em meados dos anos 2000, a quantidade de dados gerados, coletados e armazenados começou a crescer exponencialmente devido a popularização da internet. Esse fenômeno foi causado, principalmente, pelos avanços notáveis no poder de computação e criação da &lt;strong&gt;Word Wide Web&lt;/strong&gt; (Tim Berners-Lee), um sistema global de informação que permite o acesso e a visualização de documentos e recursos multimídia interconectados. Isso reviveu a antiga ideia de lidar com grandes volumes de dados, levando a criação da área do conhecimento conhecida como &lt;strong&gt;Big Data&lt;/strong&gt;. Por fim, esse cenário levou ao desenvolvimento de algoritmos de aprendizado especialmente projetados para tirar vantagem de conjuntos de dados muito grandes.
&lt;/p&gt;

&lt;h2 id=&quot;deep-learning-2011-em-diante&quot;&gt;Deep learning (2011 em diante)&lt;/h2&gt;

&lt;p align=&quot;justify&quot;&gt;
    O termo &lt;strong&gt;Aprendizado de Máquina&lt;/strong&gt; refere-se à uma área da inteligência artificial a qual estuda algoritmos e modelos capazes de aprender a partir de exemplos (dados). Diante disso, &lt;strong&gt;Deep Learning&lt;/strong&gt; consiste em uma sub-área do Aprendizado de Máquina e concentra-se em desenvolver e aprimorar o uso de redes neurais artificiais com múltiplas camadas compostas por elementos de computação símples e ajustáveis denominados &lt;strong&gt;Perceptrons&lt;/strong&gt;. Somado a isso, o termo Deep Learning foi mencionado pela primeira vez na década de 70, mas foi somente em 2011 que os métodos de aprendizado profundo realmente decolaram, principalmente no que tange ao reconhecimento de fala e de objetos. Um bom exemplo disso foi o sistema de aprendizado profundo criado pelo grupo Geoffrey Hinton, da universidade de Toronto, durante a competição &lt;strong&gt;ImageNet&lt;/strong&gt; ocorrida em 2012, onde tal sistema apresentou uma melhoria muito significativa em relação aos outros sistemas de aprendizado profundo criados até então.
&lt;/p&gt;

&lt;p align=&quot;justify&quot;&gt;
    Desde então, apesar de ficar para traz em algumas atividades, os sistemas inteligentes baseados em deep learning veem superando o desempenho humano em diversas tarefas, como reconhecimento de fala, diagnósticos médicos e tradução, o que atraiu investimentos e pessoas do mundo todo para o universo da inteligência artificial. A fins de curiosidade, no ano de 2016, um sistema de aprendizado profundo venceu o atual campeão mundial em um jogo chamado AlpaGo, intrigando o mundo com esse feito. A &lt;strong&gt;Imagem 2&lt;/strong&gt; a baixo apresenta um momento emblemático desse evento.
&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&quot;/img/AlphaGo.jpg&quot; width=&quot;624&quot; height=&quot;532&quot; align=&quot;center&quot; /&gt;
    &lt;figcaption align=&quot;center&quot;&gt;&lt;strong&gt;Imagem 2&lt;/strong&gt;: 
        &lt;a href=&quot;https://www.bbc.com/news/technology-35785875&quot;&gt;
            Google&apos;s AlphaGo (Deep Learning System) Vs Best Human
        &lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h2 id=&quot;conclusão&quot;&gt;Conclusão&lt;/h2&gt;

&lt;p align=&quot;justify&quot;&gt;
    A história da inteligência artificial foi marcada por momentos de altos e baixos. Contudo, com o passar do tempo, diversos pesquisadores contribuiram, a sua maneira, para o amadurecimento dessa incrível área do conhecimento, gerando tecnologias capazes de grandes feitos as quais atrairam atenção do mundo, trazendo recursos para o desenvolvimento de novas tecnologias cada vez mais emblemáticas.
&lt;/p&gt;

&lt;hr /&gt;
</description>
        <pubDate>Tue, 08 Aug 2023 19:30:00 -0300</pubDate>
        <link>http://localhost:4000/2023/08/08/P1-2023/</link>
        <guid isPermaLink="true">http://localhost:4000/2023/08/08/P1-2023/</guid>
        
        <category>Portifólio 1</category>
        
        
      </item>
    
      <item>
        <title>O que é uma AI?</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;“Um computador mereceria ser chamado de inteligente se pudesse enganar um humano fazendo-o acreditar que era humano.” - &lt;strong&gt;&lt;em&gt;Alan Turing&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p align=&quot;justify&quot;&gt;
Desde sua criação, a Inteligência Artificial vem impactando profundamente o modo de vida do ser humano. Nos dias atuais, ela auxilia diversas áreas, tais como saúde, tecnologia, educação, comércio, segurança, entreterimento, etc. Diante disso, o presente artigo tem como objetivo apresentar uma introdução sobre o qué uma &lt;strong&gt;inteligência artificial&lt;/strong&gt;, apresentando alguns conceitos de suma importância para área.
&lt;/p&gt;

&lt;p id=&quot;build&quot;&gt;&lt;/p&gt;

&lt;h2 id=&quot;o-que-é-inteligência&quot;&gt;O que é inteligência?&lt;/h2&gt;

&lt;p align=&quot;justify&quot;&gt;
De início, é importante entender sobre o que é inteligência. De maneira geral, podemos defini-la como:
&lt;/p&gt;

&lt;ul align=&quot;justify&quot;&gt;
    &lt;li&gt; Ato de entender: compreensão;&lt;/li&gt;
    &lt;li&gt; Capacidade de aprender, entender ou lidar com situações novas;&lt;/li&gt;
    &lt;li&gt; Uso hábil da razão;&lt;/li&gt;
    &lt;li&gt; Capacidade de aplicar conhecimento para manipular o ambiente.&lt;/li&gt;
&lt;/ul&gt;

&lt;p align=&quot;justify&quot;&gt;
Por outro lado, vale ressaltar que inteligência pode ser interpretada de maneiras diferentes, de acordo com o contexto e/ou a àrea de estudo a qual está sendo relacionada. Sendo assim, alguns tipos de inteligência são:
&lt;/p&gt;

&lt;ul align=&quot;justify&quot;&gt;
    &lt;li&gt; &lt;strong&gt;Inteligência Geral&lt;/strong&gt;: capacidade de aprender, raciocinar, resolver problemas, compreender ideias complexas e se adaptar ao ambiente.&lt;/li&gt;
    &lt;li&gt; &lt;strong&gt;Inteligência Emocional&lt;/strong&gt;: capacidade de reconhecer, compreender e gerenciar as próprias emoções e as emoções dos outros, bem como utilizar as emoções de maneira construtiva.&lt;/li&gt;
    &lt;li&gt; &lt;strong&gt;Inteligência Social&lt;/strong&gt;: envolve a capacidade de interagir eficazmente com outras pessoas, compreender seus sentimentos, motivos e comportamentos, e responder de maneira apropriada.&lt;/li&gt;
    &lt;li&gt; &lt;strong&gt;Inteligência Linguística&lt;/strong&gt; envolve a capacidade de compreender, usar e apreciar a linguagem, incluindo a escrita, a leitura e a comunicação verbal.&lt;/li&gt;
    &lt;li&gt; &lt;strong&gt;Inteligência Criativa&lt;/strong&gt;: envolve a capacidade de gerar ideias originais, soluções inovadoras e expressar-se de maneira única.&lt;/li&gt;
&lt;/ul&gt;

&lt;p align=&quot;justify&quot;&gt;
Portanto, o que seria uma &lt;strong&gt;Inteligência Artificial&lt;/strong&gt;? Dentre diversas outras definições, segundo a &lt;a href=&quot;https://www.ibm.com/topics/artificial-intelligence&quot;&gt; &lt;i&gt;International Business Machines Corporation (IBM)&lt;/i&gt;&lt;/a&gt;, podemos entender uma inteligência artificial como uma ferramenta que permite computadores e máquinas imitarem os recursos de resolução de problemas e tomada de decisão da mente humana.
&lt;/p&gt;

&lt;h2 id=&quot;fidelidade-à-performance-humana-vs-racionalidade&quot;&gt;Fidelidade à performance humana Vs Racionalidade&lt;/h2&gt;

&lt;p align=&quot;justify&quot;&gt;
Uma questão de suma importância no desenvolvimento de uma AI (Artificial Inteligence) é determinar qual abordagem será utilizada ao projetar e treinar tais sistemas. Nesse contexto, existem duas abordagens principais (&lt;strong&gt;Fidelidade à Performance Humana&lt;/strong&gt; e &lt;strong&gt;Racionalidade&lt;/strong&gt;), cada uma com suas respectivas vantagens e desevantagens. A &lt;strong&gt;Tabela 01&lt;/strong&gt; a seguir apresenta um comparativo entre as duas abordagens.
&lt;/p&gt;

&lt;!-- Tabela gerada a partir do site: https://www.tablesgenerator.com/html_tables# --&gt;
&lt;style type=&quot;text/css&quot;&gt;
.tg  {border-collapse:collapse;border-spacing:0;}
.tg td{border-color:black;border-style:solid;border-width:1px;font-family:sans-serif, sans-serif;font-size:14px;
  overflow:hidden;padding:10px 5px;word-break:normal;}
.tg th{border-color:black;border-style:solid;border-width:1px;font-family:sans-serif, sans-serif;font-size:14px;
  font-weight:normal;overflow:hidden;padding:10px 5px;word-break:normal;}
.tg .tg-c3ow{border-color:inherit;text-align:center;vertical-align:middle}
.tg .tg-3xi5{background-color:#ffffff;border-color:inherit;text-align:center;vertical-align:middle}
.tg .tg-7btt{border-color:inherit;font-weight:bold;text-align:center;vertical-align:middle}
&lt;/style&gt;

&lt;table class=&quot;tg&quot;&gt;
&lt;thead&gt;
  &lt;tr&gt;
    &lt;th class=&quot;tg-3xi5&quot; colspan=&quot;3&quot;&gt;&lt;span style=&quot;font-weight:bold&quot;&gt;Abordagens de Desenvolvimento de AI&lt;/span&gt;&lt;/th&gt;
  &lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-7btt&quot;&gt;nome&lt;/td&gt;
    &lt;td class=&quot;tg-c3ow&quot;&gt;Fidelidade à  Performance Humana&lt;/td&gt;
    &lt;td class=&quot;tg-c3ow&quot;&gt;Racionalidade&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-7btt&quot;&gt;Objetivo&lt;/td&gt;
    &lt;td class=&quot;tg-c3ow&quot;&gt; 
        Desenvolver um sistema capaz de realizar tarefas de maneira similar à um ser humano. 
    &lt;/td&gt;
    &lt;td class=&quot;tg-c3ow&quot;&gt; 
        Desenvolver um sistema que tome decisões com base em lógica, raciocínio e evidências objetivas.
    &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-7btt&quot;&gt;Vantagens&lt;/td&gt;
    &lt;td class=&quot;tg-c3ow&quot;&gt; 
        Pode ser usada em aplicações as quais a interação com humanos é importante. 
        &lt;br /&gt;
        &lt;strong&gt;Ex.:&lt;/strong&gt; assistentes virtuais, chatbots, sistemas de recomendação, etc.
    &lt;/td&gt;
    &lt;td class=&quot;tg-c3ow&quot;&gt; 
    Pode ser usada em aplicações as quais a busca da melhor solução prevalece em relação similaridade com o comportamento humano.
    &lt;br /&gt;
    &lt;strong&gt;Ex.:&lt;/strong&gt; diagnóstico médico, previsão do tempo, jogos de estratégia, algoritmos de otimização, etc. &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-7btt&quot;&gt;Desvantagens&lt;/td&gt;
    &lt;td class=&quot;tg-c3ow&quot;&gt; 
        Apesar de levar a criação de sistemas mais acessíveis e naturais para os usuários humanos, pode ser limitada em termos de objetividade e eficiência em certas tarefas.
    &lt;/td&gt;
    &lt;td class=&quot;tg-c3ow&quot;&gt; 
        Pode não ser tão compreensível para as pessoas como os sistemas que imitam o comportamento humano.
    &lt;/td&gt;
  &lt;/tr&gt;
&lt;/tbody&gt;
    &lt;caption&gt;
        Tabela 01
    &lt;/caption&gt;
&lt;/table&gt;

&lt;p align=&quot;justify&quot;&gt;
Após o entendimento sobre as duas principais abordagens de desenvolvimento de AI, é comum o surgimento da seguinte dúvida: &lt;strong&gt;qual é a melhor abordagem a ser usada?&lt;/strong&gt; A resposta é bem simples: a escolha da abordagem varia de acordo com o contexto, isto é, o objetivo da aplicação a ser construida. Ná pratica, um projeto de desenvolvimento de AI leva em consideração um equilíbrio entre as duas abordagens apresentadas.
&lt;/p&gt;

&lt;h2 id=&quot;comportamento--raciocínio&quot;&gt;Comportamento &amp;amp; Raciocínio&lt;/h2&gt;

&lt;p align=&quot;justify&quot;&gt;
A maior parte do universo da inteligência artificial gira em torno de 6 disciplinas, as quais representam atividades tecnicamente comuns à um ser humano saudável. São elas:
&lt;/p&gt;

&lt;ul align=&quot;justify&quot;&gt;
  &lt;li&gt;
    &lt;strong&gt;Processamento de linguagem Natural&lt;/strong&gt;: capacidade de comunicar-se em uma linguagem humana.
  &lt;/li&gt;
  &lt;li&gt;
    &lt;strong&gt;Representação do conhecimento&lt;/strong&gt;: capacidade de armazenar o que sabe ou ouve.
  &lt;/li&gt;
  &lt;li&gt;
    &lt;strong&gt;Raciocínio automatizado&lt;/strong&gt;: capacidade de responder perguntas e tirar novas conclusões.
  &lt;/li&gt;
  &lt;li&gt;
    &lt;strong&gt;Aprendizado de Máquina&lt;/strong&gt;: capacidade de adaptar-se à novas circunstâncias, além de detectar e extrapolar padrões.
  &lt;/li&gt;
  &lt;li&gt;
    &lt;strong&gt;Visão computacional &amp;amp; Reconhecimento de fala&lt;/strong&gt;: capacidade de percepção de mundo zdo sistema.
  &lt;/li&gt;
  &lt;li&gt;
    &lt;strong&gt;Robótica&lt;/strong&gt;: permite a manipulação de objetos e movimentar-se.
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p align=&quot;justify&quot;&gt;
É nesse contexto que o matemático britânico Alan Turing, em meados dos anos 50, publicou em seu artigo &lt;a href=&quot;https://www.cse.chalmers.se/~aikmitr/papers/Turing.pdf#page=442&quot;&gt;&lt;strong&gt;&lt;i&gt;&quot;Computing Machinery and Intelligence&quot;&lt;/i&gt;&lt;/strong&gt;&lt;/a&gt;, uma técnica conhecida até os dias atuais como &lt;strong&gt;Teste de Turing&lt;/strong&gt;. De maneira geral, esse teste consiste em classificar uma máquina como inteligente caso uma pessoa denominada &quot;examinadora&quot; não consiga destinguir, com precisão, a diferença entre a máquina e uma pessoa humana. Para isso, a pessoa examinadora realizaria um dialogo com cada uma das entidades (pessoa e máquina) para depois fornecer seu veredito.
&lt;/p&gt;

&lt;p align=&quot;justify&quot;&gt;
Na prática, poucos sistemas inteligentes atingiram consistentemente o nível de inteligência humana necessário para passar no Teste de Turing, contudo há diversas críticas em relação ao fato desse teste não considerar os outros tipos de inteligência. Além disso, pesquisadores de AI geralmente dedicam pouco esforço para passar no teste de Turing, pois priorizam o estudo dos princípios os quais envolvem a inteligência artificial.
&lt;/p&gt;

&lt;p align=&quot;justify&quot;&gt;
Um outro assunto de suma importância é a racionalidade dos sitemas inteligentes. Diante disso, a fim de explicar melhor esse contexto, é importante entender dois termos importantes: a &lt;strong&gt;Modelagem Cognitiva&lt;/strong&gt; e as &lt;strong&gt;Leis do Pensamento&lt;/strong&gt;. O primeiro termo refere-se a um modelo de desenvolvimento de IA baseado na comparação entre a IA e a ciência cognitiva, geralmente centrada em 3 atividades:
&lt;/p&gt;

&lt;ul align=&quot;justify&quot;&gt;
  &lt;li&gt;
    &lt;strong&gt;Introspecção&lt;/strong&gt;: captação de pensamentos humanos enquanto eles passam pelo cérebro;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;strong&gt;Experimentos Psicológicos&lt;/strong&gt;: observação de uma pessoa em ação;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;strong&gt;Análise do Cérebro&lt;/strong&gt;: observando o cérebro em ação por meio de imagens.
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p align=&quot;justify&quot;&gt;
Logo, esse modelo possui como objetivo não só desenvolver um sistema inteligente, mas também comparar a etapas utilizadas pela máquina até a solução do problema e comparar tal algoritmo aos seres humanos resolvendo o mesmo problema.
&lt;/p&gt;

&lt;p align=&quot;justify&quot;&gt;
Já o segundo termo (Leis do Pensamento), refere-se à 3 áreas do conhecimento muito utilizadas na matemática. São elas:
&lt;/p&gt;

&lt;ul align=&quot;justify&quot;&gt;
  &lt;li&gt;
    &lt;strong&gt;silogismo aristotélico&lt;/strong&gt;: fornece padrões para a estrutura de argumentos que sempre produzem conclusões corretas quando dadas premissas corretas;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;strong&gt;Lógica&lt;/strong&gt;: traz notações precisas para afirmações sobre objetos do mundo e as relações entre eles;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;strong&gt;probabilidade&lt;/strong&gt;: traz esclarecimento à problemas os quais não conhecemos todas as regras.
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p align=&quot;justify&quot;&gt;
Diante disso, a pesar das leis do pensamento forenecer subisídio teórico para construção de um modelo abrangente de pensamento racional, elas não são suficientes para gerar um comportamento inteligente, pois para isso, é necessário outro conhecimento extra, isto é, uma &lt;strong&gt;teoria de ação racional&lt;/strong&gt; a qual relacione a ação de um agente de acordo com suas preferências e objetivos.
&lt;/p&gt;

&lt;p align=&quot;justify&quot;&gt;
&lt;strong&gt;Obs.:&lt;/strong&gt; o que seria um agente?
&lt;/p&gt;

&lt;h2 id=&quot;modelo-padrão&quot;&gt;Modelo Padrão&lt;/h2&gt;

&lt;p align=&quot;justify&quot;&gt;
Antes de adentrarmos em um modelo padrão de AI, é necessário responder a pergunta apresentada no final do tópico anterior. Sendo assim, podemos entender um &lt;strong&gt;agente&lt;/strong&gt; como algo capaz de agir. Logo, espera-se que um &lt;strong&gt;agente inteligente&lt;/strong&gt; seja capaz de:
&lt;/p&gt;

&lt;ul align=&quot;justify&quot;&gt;
  &lt;li&gt;
    Operar a si mesmo de maneira autônoma;
  &lt;/li&gt;
  &lt;li&gt;
    Perceber o ambiente a sua volta;
  &lt;/li&gt;
  &lt;li&gt;
    Persistir, por um período de tempo prolongado, na resolução de problemas;
  &lt;/li&gt;
  &lt;li&gt;
    Adaptar-se à eventuais mudanças;
  &lt;/li&gt;
  &lt;li&gt;
    Criar e buscar objetivos.
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p align=&quot;justify&quot;&gt;
Diante do exposto, também é válido o seguinte questionamento: &lt;strong&gt;o que é um agente racional?&lt;/strong&gt;. Um agente racional pode ser entendido como um agente que age de modo a atingir o melhor resultado exato ou esperado, a depender do nível de incerteza do problema a ser resolvido. Esse tipo de agente possui duas principais vantagens em relação aos outros agentes discutidos: 
&lt;/p&gt;

&lt;ul align=&quot;justify&quot;&gt;
  &lt;li&gt;
    È mais geral do que a abordagem das &quot;leis do pensamento&quot;, isto é, é aplicável em contextos diversos;
  &lt;/li&gt;
  &lt;li&gt;
    É mais suscetível ao desenvolvimento ciêntífico, pois aproxima-se da ciência cognitiva.
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p align=&quot;justify&quot;&gt;
Por fim, vale ressaltar que a abordagem do agente racional para o desenvolvimento de AI tem prevalecido na maior parte da história dá inteligência artificial, sendo a maioria das pesquisas realizadas até então centradas na construção de &lt;strong&gt;agentes capazes de atingir um resultado correto&lt;/strong&gt;, sendo tal resultado definido, à priori, como um objetivo a ser atingido pelo agente durante sua construção. Esse paradigma geral de desenvolvimento de agente evoluiu ao que hoje chama-se &lt;strong&gt;Modelo Padrão&lt;/strong&gt;. 
&lt;/p&gt;

&lt;h2 id=&quot;problemas-do-modelo-padrão&quot;&gt;Problemas do Modelo Padrão&lt;/h2&gt;

&lt;p align=&quot;justify&quot;&gt;
A pesar de seu sucesso, o modelo padrão possui alguns problemas os quais devem ser destacados. Muito disso se deve ao fato de que tal modelo necessita de um &lt;strong&gt;objetivo totalmente especificado&lt;/strong&gt; para a máquina, limitando sua aplicação à medida em que os problemas vão se aproximando do &lt;strong&gt;mundo real&lt;/strong&gt;, pois torna-se cada vez mais difícil especificar o objetivo de forma completa, sendo um sistema implementado com um objetivo incorreto tendencioso à consequências negativas. É nesse contexto que surge o &lt;strong&gt;problema de alinhamento de valor&lt;/strong&gt;, isto é, a dificuldade de se conciliar nossas preferências com o objetivo programado ná maquina.
&lt;/p&gt;

&lt;h2 id=&quot;fundamentos-da-inteligência-artificial&quot;&gt;Fundamentos da Inteligência Artificial&lt;/h2&gt;

&lt;p align=&quot;justify&quot;&gt;
Os principais fundamentos da inteligência artificial podem ser abordados a partir das principais áreas do conhecimento as quais vêm contribuindo, ao longo do tempo, com ideias, pontos de vista e técnicas. Confira a seguir uma lista contendo algumas dessas áreas seguidas, respectivamente, de perguntas as quais cada uma delas tentam responder.
&lt;/p&gt;

&lt;ul align=&quot;justify&quot;&gt;
  &lt;li&gt;
    &lt;strong&gt;Filosofia&lt;/strong&gt;: de onde vem o conhecimento? Como o conhecimento leva à ação? 
  &lt;/li&gt;
  &lt;li&gt;
    &lt;strong&gt;Matemática&lt;/strong&gt;: o que pode ser computado? Como raciocinamos conciderando incertezas?
  &lt;/li&gt;
  &lt;li&gt;
    &lt;strong&gt;Economia&lt;/strong&gt;: como tomar decisões de acordo com nossas preferências? Como devemos fazer algo levando em consideração o fato de a recompensar estar em um futuro distante?
  &lt;/li&gt;
  &lt;li&gt;
    &lt;strong&gt;Neurociência&lt;/strong&gt;: como o cérebro humano processa informação?
  &lt;/li&gt;
  &lt;li&gt;
    &lt;strong&gt;Psicologia&lt;/strong&gt;: como seres humanos e outros animais pensam e agem?
  &lt;/li&gt;
  &lt;li&gt;
    &lt;strong&gt;Engenharia da Computação&lt;/strong&gt;: como podemos construir um sistema computacional eficiente?
  &lt;/li&gt;
  &lt;li&gt;
    &lt;strong&gt;Cibernética (Teoria do Controle)&lt;/strong&gt;: como os artefatos podem operar de maneira autônoma? 
  &lt;/li&gt;
  &lt;li&gt;
    &lt;strong&gt;Linguística&lt;/strong&gt;: qual a relação entre o pensamento e a linguagem?
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;conclusão&quot;&gt;Conclusão&lt;/h2&gt;

&lt;p align=&quot;justify&quot;&gt;
  De acordo com o exposto nesse artigo, pode-se concluir que a ciência a qual envolve a pesquisa e projetos de inteligência artificial, ao contrário do senso comum, consiste em uma área multidisciplinar, envolvendo desde conceitos oriundos da psicologia e filosofia até a matemática e ciência da computação. Somado a isso, é importante destacar algumas abordagens de desenvolvimento para sistemas inteligentes, uma fiel à performance humana e outra centrada na racionalidade, cada uma com suas respectivas qualidades e defeitos, os quais devem ser ponderados a fim de escolher a melhor abordagem de acordo com a necessidade do projeto. 
&lt;/p&gt;

&lt;p align=&quot;justify&quot;&gt;
  Por fim, com o passar dos anos, as tecnicas e abordagens de desenvolvimento vêm evoluindo cada vez mais, auxiliando o desenvolvimento de sistemas cada vez melhores e evidenciando novas necessidades e tendências. Um bom exemplo desse contexto e o modelo padrão que, a pesar de bastante utilizado, mostra-se frágil á medida em que nos aproximamos em determinados problemas reais.
&lt;/p&gt;

&lt;hr /&gt;
</description>
        <pubDate>Mon, 07 Aug 2023 09:30:00 -0300</pubDate>
        <link>http://localhost:4000/2023/08/07/P1-2023/</link>
        <guid isPermaLink="true">http://localhost:4000/2023/08/07/P1-2023/</guid>
        
        <category>Portifólio 1</category>
        
        
      </item>
    
  </channel>
</rss>
